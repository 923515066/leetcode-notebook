设计并实现一个算法，找出二叉树中某两个节点的第一个共同祖先。不得将其他的节点存储在另外的数据结构中。注意：这不一定是二叉搜索树。

例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]

    3
   / \
  5   1
 / \ / \
6  2 0  8
  / \
 7   4
示例 1:

输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。
示例 2:

输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出: 5
解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。
说明:

所有节点的值都是唯一的。
p、q 为不同节点且均存在于给定的二叉树中。



//  思路：类似后续遍历，当 当前节点为p或者q时返回当前节点。
// 如果左右子节点递归调用返回的都不为空，则返回当前节点，
// 否则返回左右结点中递归调用值不为空的那个节点(考虑了一个节点在另一个节点子树的情况)，
// 否则返回null
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) return null;
        // 这种情况我们只遍历到了一个节点，无法确定另一个节点是否在当前节点子树下
        // 但是如果不在子树下，为正常情况
        // 如果在子树下，则当前节点的确是最近祖先，且父节点递归只能一直返回当前节点
        if (root == p || root == q) {
            return root;
        }
        TreeNode left =  lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if (left != null && right != null) {
            return root;
        } else if (left != null) {
            return left;
        } else {
            return right;
        }
    }
}