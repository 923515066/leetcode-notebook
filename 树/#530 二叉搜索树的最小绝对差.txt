给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。

 

示例：

输入：

   1
    \
     3
    /
   2

输出：
1

解释：
最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。



//  思路：中序遍历，每次比较两个相邻节点之间的gap
class Solution {
    private int minDiff = Integer.MAX_VALUE;
    private Integer pre = null;
    public int getMinimumDifference(TreeNode root) {
        dfs(root);
        return minDiff;
    }

    public void dfs(TreeNode root) {
        if (root == null) return;
        dfs(root.left);
        if (pre != null && root.val - pre < minDiff) {
            minDiff = root.val - pre;
        }
        pre = root.val;
        dfs(root.right);
    }
}