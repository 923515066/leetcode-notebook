实现一个函数，检查一棵二叉树是否为二叉搜索树。

示例 1:
输入:
    2
   / \
  1   3
输出: true
示例 2:
输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。
	 
	 
	 
 // 思路：如果树是二叉搜索树，则中序遍历时必然是递增的
class Solution {
    private Integer pre = null;
    private boolean isBST = true; 
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        isValidBSTCore(root);
        return isBST;
    }
    public void isValidBSTCore(TreeNode root) {
        if (root == null) return;
        // 如果当前节点是最左节点，不用递归判断左节点了
        if (pre == null && root.left == null) {
            pre = root.val;
        } else {
            isValidBSTCore(root.left);
            if (root.val <= pre) isBST = false;
            pre = root.val;
        }
        // 如果左子树遍历完已经不是有效BST，不用遍历右子树了
        if (!isBST) return;
        isValidBSTCore(root.right); 
    }
}