在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:
(1) 每次只能移动一个盘子;
(2) 盘子只能从柱子顶端滑出移到下一根柱子;
(3) 盘子只能叠在比它大的盘子上。

请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。

你需要原地修改栈。

示例1:

 输入：A = [2, 1, 0], B = [], C = []
 输出：C = [2, 1, 0]
示例2:

 输入：A = [1, 0], B = [], C = []
 输出：C = [1, 0]
提示:

A中盘子的数目不大于14个。



// 这道题终于没靠题解写出来了
// 递归思路：三个桶 假设要把A中k个元素搬到C
// 先把桶A中k-1个元素搬到B(递归一次)
// 完成后把A当前最上面的一个元素搬到C(注意是最上面的一个元素，不然被简单用例欺骗以为是底部元素)
// 然后把B中k-1个元素搬到C(再递归一次)
class Solution {
    public void hanota(List<Integer> A, List<Integer> B, List<Integer> C) {
        if (A.size() == 0) return;
        hanotaCore(A, B, C, A.size());
    }

    public void hanotaCore(List<Integer> A, List<Integer> B, List<Integer> C, int k) {
        if (k == 1) {
            C.add(A.get(A.size() - 1));
            A.remove(A.size() - 1);
            return;
        }
        hanotaCore(A, C, B, k - 1);
        C.add(A.get(A.size() - 1));
        A.remove(A.size() - 1);
        hanotaCore(B, A, C, k - 1);
    }
}