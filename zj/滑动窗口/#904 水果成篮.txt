你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。

你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：

你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。
你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。
一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。
给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。

 

示例 1：

输入：fruits = [1,2,1]
输出：3
解释：可以采摘全部 3 棵树。
示例 2：

输入：fruits = [0,1,2,2]
输出：3
解释：可以采摘 [1,2,2] 这三棵树。
如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。
示例 3：

输入：fruits = [1,2,3,2,2]
输出：4
解释：可以采摘 [2,3,2,2] 这四棵树。
如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。
示例 4：

输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]
输出：5
解释：可以采摘 [1,2,1,1,2] 这五棵树。
 

提示：

1 <= fruits.length <= 105
0 <= fruits[i] < fruits.length



class Solution {
    public int totalFruit(int[] fruits) {
        int ans = 0;
        int len = fruits.length;
        int head = 0, tail = 0;
        int f1 = -1, f2 = -1;
        for(; tail < len;tail++) {
            // 判断是否可以采摘
            if (f1 == -1) {
                f1 = fruits[tail];
            } else if (fruits[tail] == f1) {
            } else if (f2 == -1) {
                f2 = fruits[tail];
            } else if (fruits[tail] == f2) {
            } 
            // 不可以,则从末尾元素倒推
            else {
                ans = Math.max(ans, tail-head);
                int prev = tail-1;
                while(prev != 0 && fruits[prev-1] == fruits[prev]) prev--;
                f1 = fruits[prev];
                f2 = fruits[tail];
                head = prev;

            }
            
        }
        ans = Math.max(ans,  tail- head);
        return ans;

    }
}