给定一个单链表 L：L0→L1→…→Ln-1→Ln ，
将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

示例 1:

给定链表 1->2->3->4, 重新排列为 1->4->2->3.
示例 2:

给定链表 1->2->3->4->5, 重新排列为 1->5->2->4->3.



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 // 获得链表中点记得用快慢指针；
 //链表截断时记得短尾；
 //获取后半段倒序  链表反转速度比使用栈快
 import java.util.Stack;
class Solution {
    public void reorderList(ListNode head) {
        if (head == null) return;
        ListNode slow = head;
        ListNode fast = head;
        // 快慢指针找中点
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        // 前半段短尾
        ListNode head2 = slow.next;
        slow.next = null;
        fast = null;
        slow = null;

        // 前半段缝隙中插入后半段节点
        ListNode node1 = head;
        ListNode node2 = reverse(head2);
        ListNode temp1;
        ListNode temp2;
        while (node1 != null && node2 != null) {
            temp1 = node1.next;
            node1.next = node2;
            temp2 = node2.next;
            node2.next = temp1;
            node1 = temp1;
            node2 = temp2;
        }

    }

// 链表反转函数
    public ListNode reverse(ListNode head) {
        if (head == null) return null;
        ListNode pre = null;
        ListNode curr = head;
        ListNode next = head.next;

        while(curr != null) {
            next = curr.next;
            curr.next = pre;
            pre = curr;
            curr = next;
        }
        return pre;
    }
}