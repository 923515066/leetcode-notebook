给出一个以头节点 head 作为第一个节点的链表。链表中的节点分别编号为：node_1, node_2, node_3, ... 。

每个节点都可能有下一个更大值（next larger value）：对于 node_i，如果其 next_larger(node_i) 是 node_j.val，那么就有 j > i 且  node_j.val > node_i.val，而 j 是可能的选项中最小的那个。如果不存在这样的 j，那么下一个更大值为 0 。

返回整数答案数组 answer，其中 answer[i] = next_larger(node_{i+1}) 。

注意：在下面的示例中，诸如 [2,1,5] 这样的输入（不是输出）是链表的序列化表示，其头节点的值为 2，第二个节点值为 1，第三个节点值为 5 。



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 import java.util.Stack;
class Solution {
    public int[] nextLargerNodes(ListNode head) {
        if (head == null) return null;
        ListNode curr = head;
        int size = 0;
        Stack<ListNode> stack = new Stack<ListNode>();
        int max = 0;
        // 创建栈保存节点引用，新push的节点，和前面的比较，若以往的节点值更小则更改value为当前push节点的val后弹出
        // 直到遇到val更大的老节点
        while (curr != null) {
            while(!stack.isEmpty() && stack.peek().val < curr.val) {
                stack.pop().val = curr.val;
            }
            stack.push(curr);
            curr = curr.next;
            size++;
        }
        // 所有节点都插入栈一遍后，栈剩下的节点的链表前方无更大值节点，赋值0
        while (!stack.isEmpty()) {
            stack.pop().val = 0;
        }
        int []array = new int[size];
        curr = head;
        for (int i =0; i < size; i++) {
            array[i] = curr.val;
            curr = curr.next;
        }
        return array;
    }
}