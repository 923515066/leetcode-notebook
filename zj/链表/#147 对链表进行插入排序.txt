对链表进行插入排序。


插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。
每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。

 

插入排序算法：

插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。
每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。
重复直到所有输入数据插入完为止。
 

示例 1：

输入: 4->2->1->3
输出: 1->2->3->4
示例 2：

输入: -1->5->3->4->0
输出: -1->0->3->4->5



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    // 迭代指针iterator从head开始遍历，直到next比curr大时在此处插入curr
    // 由于要交换curr的位置，需要记录curr的上一个节点pre
    // 第一种特殊情况 curr比pre大 直接不用比较 极大减少比较次数(!!!)
    // 第二种 curr比head小 也不用比较  减少比较次数
    public ListNode insertionSortList(ListNode head) {
        if (head == null) return null;
        ListNode iterator = null;
        ListNode curr = head.next;
        ListNode pre = head;
        while (curr != null) {
            if (curr.val >= pre.val) {
                pre = curr;
                curr = curr.next;
            }
            else if (head.val > curr.val) {
                pre.next = curr.next;
                curr.next = head;
                head = curr;
                curr = pre.next;
            } else {
                iterator = head;
                while (iterator.next.val <= curr.val) {
                    iterator = iterator.next;
                }
                pre.next = curr.next;
                curr.next = iterator.next;
                iterator.next = curr;
                curr = pre.next;
            }
        }
        return head;
    }
}