给你一棵以 root 为根的二叉树和一个 head 为第一个节点的链表。

如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以 head 为首的链表中每个节点的值，那么请你返回 True ，否则返回 False 。

一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。

 

示例 1：



输入：head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
输出：true



class Solution {
    // 错误做法，缺少了一个回溯判断，也就是当树中某一个节点和链表中某一个节点(非头节点)相同时，
    // 若后续节点不重合，该节点没有和链表头重新遍历的机会
    // public boolean isSubPath(ListNode head, TreeNode root) {
    //     return isSubPathCore(head, head, root);
    // }
    // public boolean isSubPathCore(ListNode head, ListNode curr1, TreeNode curr2) {
    //     if (curr1 == null) return true;
    //     if (curr2 == null) return false;
    //     if (curr1.val == curr2.val) {
    //         return isSubPathCore(head, curr1.next, curr2.left) || isSubPathCore(head, curr1.next, curr2.right);
    //     } else if (head.val == curr2.val) {
    //         return isSubPathCore(head, head.next, curr2.left) || isSubPathCore(head, head.next, curr2.right);
    //     } else {
    //         return isSubPathCore(head, head, curr2.left) || isSubPathCore(head, head, curr2.right);
    //     }
    // }

    // 正确做法，每个节点都和链表头开始递归遍历比较，如果不行再让子节点递归执行
    // 第二个递归函数中 节点遍历的判断结果只影响和链表头节点比较的那个节点
    public boolean isSubPath(ListNode head, TreeNode root) {
        if (head == null) return true;
        if (root == null) return false;
        return isSub(head, root) || isSubPath(head, root.left) || isSubPath(head, root.right);
    }

    public boolean isSub(ListNode head, TreeNode node) {
        //特判：链表走完了，返回true
        if (head == null) {
            return true;
        }
        //特判：链表没走完，树走完了，这肯定不行，返回false
        if (node == null) {
            return false;
        }
        //如果值不同，必定不是啊
        if (head.val != node.val) {
            return false;
        }
        //如果值相同，继续看，左边和右边有一个满足即可
        return isSub(head.next, node.left) || isSub(head.next, node.right);
    }
}