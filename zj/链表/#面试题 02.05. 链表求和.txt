给定两个用链表表示的整数，每个节点包含一个数位。

这些数位是反向存放的，也就是个位排在链表首部。

编写函数对这两个整数求和，并用链表形式返回结果。

 

示例：

输入：(7 -> 1 -> 6) + (5 -> 9 -> 2)，即617 + 295
输出：2 -> 1 -> 9，即912
进阶：假设这些数位是正向存放的，请再做一遍。

示例：

输入：(6 -> 1 -> 7) + (2 -> 9 -> 5)，即617 + 295
输出：9 -> 1 -> 2，即912

// 同#2两数相加
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode sumNode =null;
        ListNode sumListHead = null;
        while (l1 != null && l2 != null) {
            if (sumNode == null) {
                sumNode = new ListNode(0);
                sumListHead = sumNode;
            } else {
                sumNode.next = new ListNode(0);
                sumNode = sumNode.next;
            }
            if (l1.val + l2.val + carry >=10) {
                sumNode.val = l1.val + l2.val + carry - 10;
                carry = 1;
            }
            else {
                sumNode.val = l1.val + l2.val + carry;
                carry = 0;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            sumNode.next = new ListNode(0);
            sumNode = sumNode.next;
            if (l1.val + carry >=10) {
                sumNode.val = l1.val + carry - 10;
                carry = 1;
            }
            else {
                sumNode.val = l1.val + carry;
                carry = 0;
            }
            l1 = l1.next;
        }
        while (l2 != null) {
            sumNode.next = new ListNode(0);
            sumNode = sumNode.next;
            if (l2.val + carry >=10) {
                sumNode.val = l2.val + carry - 10;
                carry = 1;
            }
            else {
                sumNode.val = l2.val + carry;
                carry = 0;
            }
            l2 = l2.next;
        }
        if (carry == 1) {
            sumNode.next = new ListNode(1);
            sumNode = sumNode.next;
        }
        return sumListHead;
    }
}