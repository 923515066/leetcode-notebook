给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。

要求返回这个链表的 深拷贝。 

我们用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：

val：一个表示 Node.val 的整数。
random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。
 

示例 1：



输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]
示例 2：



输入：head = [[1,1],[2,1]]
输出：[[1,1],[2,1]]
示例 3：



输入：head = [[3,null],[3,0],[3,null]]
输出：[[3,null],[3,0],[3,null]]
示例 4：

输入：head = []
输出：[]
解释：给定的链表为空（空指针），因此返回 null。

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return head;

        Node newListSentry = new Node(0);
        Node newCurr = newListSentry;

        Node curr = head;
        // 深拷贝next节点 同时把通过中间节点next将旧节点和新的拷贝节点联系
        while (curr != null) {
            newCurr.next = new Node(curr.val);
            newCurr = newCurr.next;

            Node temp = new Node(0);
            temp.next = curr.next;
            curr.next = temp;
            temp.random = newCurr;
            curr = temp.next;
        }
        // 深拷贝随机指针
        curr = head;
        while (curr != null) {
            // 特殊情况  random指向null
            // curr.next.random.random 当前节点所属的深拷贝节点的random指针
            // curr.random.next.random 当前节点的random指针所指节点的深拷贝
            if (curr.random != null) {
                curr.next.random.random = curr.random.next.random;
            }
            curr = curr.next.next;
        }
        curr = head;
        while (curr != null) { 
            // 原链表next指针复原 否则会报错
            curr.next = curr.next.next;
            curr = curr.next;
        }
        return newListSentry.next;
        
    }
}