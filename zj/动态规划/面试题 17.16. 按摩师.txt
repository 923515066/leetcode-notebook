一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

注意：本题相对原题稍作改动

 

示例 1：

输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：

输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
示例 3：

输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。



// dp[i][0]表示第i个不选时的最大值
// dp[i][0] =max(dp[i−1][0],dp[i−1][1])
// 因为相邻不能选,所以dp[i][1] = dp[i-1][0]+num_i
// 因为新的dp[i][0/1]之和上一个状态有关，可以不使用数组，减少内存消耗
class Solution {
    public int massage(int[] nums) {
        if (nums.length == 0) return 0;
        int length = nums.length;
        int max = nums[0];
        int dp_0 = 0, dp_1 = nums[0];
        int new_dp_0, new_dp_1;
        for(int i = 1; i < length; i++) {
            new_dp_0 = Math.max(dp_0, dp_1);
            new_dp_1 = dp_0+nums[i];
            dp_0 = new_dp_0;
            dp_1 = new_dp_1;
            max = Math.max(max, Math.max(new_dp_0, new_dp_1));
        }
        return max;
    }
}