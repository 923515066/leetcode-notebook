给定一个未排序的整数数组，找到最长递增子序列的个数。

示例 1:

输入: [1,3,5,4,7]
输出: 2
解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。
示例 2:

输入: [2,2,2,2,2]
输出: 5
解释: 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。
注意: 给定的数组长度不超过 2000 并且结果一定是32位有符号整数。



class Solution {
    public int findNumberOfLIS(int[] nums) {
        int length = nums.length;
		if (length <= 1) return length;

        int []ans = new int[length];
        int []times = new int[length];
        for(int i = 0; i <length; i++) times[i] = 1;
        int max = 0;
        for(int i = 1; i < length; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[i] > nums[j]) {
                    if (ans[i] <ans[j]+1) {
						ans[i] = ans[j] +1;
                        times[i] = times[j];
                    } else if (ans[i] == ans[j] +1) {
                        times[i]+=times[j];
                    }
                }
            }
        }
        for(int i = 0; i <length; i++) {
            max = Math.max(max, ans[i]);
        }
        int sum = 0;
        for(int i = 0; i <length; i++) {
            if (ans[i] == max) sum += times[i];
        }
        return sum;
    }
}