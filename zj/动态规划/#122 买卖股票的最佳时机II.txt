给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 

提示：

1 <= prices.length <= 3 * 10 ^ 4
0 <= prices[i] <= 10 ^ 4



// 贪心法，只要股票一直涨价就持有，否则卖出
// 开始持有股票时，记录最小值和最大值(因为股票涨价才保持持有状态，所以就是第一天价格和卖出那天的价格)，两值的差就是本次受益
// 最终最大受益就是多次交易的受益求和
class Solution {
    public int maxProfit(int[] prices) {
        int size = prices.length;
        if (size <= 1) return 0;
        int min = prices[0], max = prices[0];
        int sum = 0;
        for(int i = 1; i < size; i++) {
            if (prices[i] > max) {
                max = prices[i];
            } else {
				sum += max - min;
                min = prices[i];
                max = prices[i];
            }
        }
        sum += max - min;
        return sum;
    }
}


// 动态规划：
// dp[i][0/1]分别表示到第i天为止，不持有/持有股票的累积受益
// 今天不持有股票可能是昨天也不持有股票或者今天卖出了
// dp[i][0] = max(dp[i-1][0], dp[i-1][1] + price[i])
// 今天持有股票可能是今天买入或者昨天就持有股票了
// dp[i][1] = max(dp[i-1][1], dp[i-0][0] - price[i])
// 最终累积受益就是最后一天不持有股票的累积受益
// 初始化dp[0][0] = 0, dp[0][1] = -price[0]
// 因为今天状态只和昨天有关，所以不需要两个数组
class Solution {
    public int maxProfit(int[] prices) {
        int size = prices.length;
        if (size <= 1) return 0;
        int dp_0 = 0, dp_1 = -prices[0];
        for(int i = 1; i <size; i++) {
            int temp_dp0 = dp_0;
            dp_0 = Math.max(dp_0, dp_1 + prices[i]);
            dp_1 = Math.max(dp_1, dp_0 - prices[i]);
        }
        return dp_0;
    }
}