给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]



// dp[i][0]为卖出，dp[i][1]为持有，dp[i][2]为冷冻期
// dp[i][0] = dp[i-1][1] + prices[i]
// dp[i][1] = max(dp[i-1][2] = prices[i], dp[i-1][1])
// dp[i][2] = max(dp[i-1][0], dp[i-1][2])
class Solution {
    public int maxProfit(int[] prices) {
        int size = prices.length;
        if (size <= 1) return 0;
        // dp_0为卖出，dp_1为持有，dp_2为冷冻期
        int dp_0 = 0, dp_2 = 0, dp_1= -prices[0];
        for(int i = 1; i < size; i++) {
            int temp = dp_0;
            dp_0 = dp_1 + prices[i];
            dp_1 = Math.max(dp_1, dp_2 - prices[i]);
            dp_2 = Math.max(temp,dp_2);
        }
        return Math.max(dp_0, dp_2);
    }
}