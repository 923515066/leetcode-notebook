给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1] 
输出: 0 
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


// dp[i][j][k]表示第i天持有股票(j: 0/1)并且之前已经完成了k次交易(k:0/1/2)
// 题目要求最多可以完成两笔交易，也就是说实际上可能只交易一次或者不交易
// 不需要考虑已经交易了2次并且持有股票的场景
// 转换方程
// dp[i][0][k] = max(dp[i-1][0][k], dp[i-1][1][k-1] + pr[i])
// dp[i][1][k] = max(dp[i-1][1][k], dp[i-1][0][k] - pr[i])
class Solution {
    public int maxProfit(int[] prices) {
		int size = prices.length;
        if (size <= 1) return 0;
        int dp_0_0 = 0, dp_0_1 = 0, dp_0_2 = 0;
        int dp_1_0 = -prices[0], dp_1_1 = -prices[0];
        for(int i = 1; i < size; i++) {
            dp_0_0 = dp_0_0;
            dp_1_0 = Math.max(dp_1_0, dp_0_0 - prices[i]);
            int temp1 = dp_0_1, temp2 = dp_1_1;;
            dp_0_1 = Math.max(dp_0_1, dp_1_0  + prices[i]);
            dp_1_1 = Math.max(dp_1_1, temp1 - prices[i]);
            dp_0_2 = Math.max(dp_0_2, temp2 + prices[i]);
        }
        return Math.max(Math.max(dp_0_0, dp_0_1), dp_0_2);
    }
}