给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。

 

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

 

说明：

如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。


// 转换方程
// dp[n][i] = triangle[n][i] + min(dp[n-1][i-1], dp[n-1][i])
// 因为这里每一层计算dp时只和上一层相关，所以可以使用一个一维数组来保存，降低空间复杂度
// 实际遍历时从右到左，因为dp数组会覆盖上一层的状态，dp[i] 会被下一层的dp[i] 和 dp[i+1]使用到
// 如果从左到右 会污染数据
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
		if (triangle == null) return 0;
        int LineNumber = triangle.size();
        if (LineNumber == 0) return 0;
        int []dp = new int[LineNumber];
        dp[0] = triangle.get(0).get(0);
        for(int i = 1; i <LineNumber; i++) {
            for(int j = i; j >= 0; j--) {
                if(j == i) dp[j] = dp[j-1] + triangle.get(i).get(j);
                else if (j == 0) dp[j] = dp[j] + triangle.get(i).get(j);
                else {
                    dp[j] = triangle.get(i).get(j) + Math.min(dp[j],dp[j-1]);
                }
            }
        }
        int minSum = dp[0];
        for(int i = 1; i < LineNumber; i++) {
            minSum = Math.min(minSum, dp[i]);
        }
        return minSum;
    }
}