给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。

请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。

说明:
不允许旋转信封。

示例:

输入: envelopes = [[5,4],[6,4],[6,7],[2,3]]
输出: 3 
解释: 最多信封的个数为 3, 组合为: [2,3] => [5,4] => [6,7]。



// 要求：相同w的信封不能套娃，不能翻转信封
// 错误思路1：每个w相同的子序列只保留h最小的那个元素，这样可能会出现w1 < w2 但是 h1 > h2的情况


// 错误思路2：一开始排序只按照w升序，在binarySearch中排序h时首先判断w是否严格大于
// [[30,50],[12,2],[3,4],[12,15]] 这种情况下[12,2] 会替代 [3,4],导致[12,15]无法放入
// 错误输出:2  预期3
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        Arrays.sort(envelopes, (o1, o2) ->{
            // w升序排列
            return o1[0] - o2[0];
        });
        // int size = envelopes.length;
        // int []HofEnvelopes = new int[size];
        // for(int i = 0; i <size; i++) {
        //     HofEnvelopes[i] = envelopes[i][1];
        // }
        // return LIS(HofEnvelopes);
        return LIS(envelopes);
    }

    // LIS使用二分法+贪心，复杂度为o(nlogn)
    // binarySearch中的数组参数必须为升序的，检索返回情况：
    // 1 如果检索元素在数组内，返回i 表示arr[i]是搜索元素
    // 2 如果不在数组内，返回i(负数) 表示-i - 1是插入点，也就是第一个比搜索值大的元素
    // 3 i为-1(2的特殊情况，可以认为就是2) 表示i比数组所有元素小
    // 4 同理i为-length-1 表示i比所有数组元素大
    public int LIS(int [][]nums) {
        int end = 0;
        int size = nums.length;
        int [][]dp = new int[size][2];
        for(int []num: nums) {
            int i = Arrays.binarySearch(dp,0,end, num, (o1, o2) -> {
                if (o1[0] == o2[0]) return 0;
                else return o1[1] - o2[1];
            });
            if (i < 0) {
                i = -i-1;
                dp[i][0] = num[0];
                dp[i][1] = num[1];
            } else {
                if (num[1] < dp[i][1]) dp[i][1] = num[1];                
            }
            // 说明搜索值不在数组中且比所有元素大
            if (i == end) {
                end++;
            }
        }
        return end;
    }
}
// 实际上确实可以一开始排序只按照w升序，但是后续dp只能用两层for 复杂度o(n^2)
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        int size = envelopes.length;
        if (size == 0) return size;
        Arrays.sort(envelopes, (o1, o2) -> {
            if (o1[0] > o2[0]) return 1;
            else if (o1[0] < o2[0]) return -1;
            else return 0;
        });
        int[] dp = new int[size];
        Arrays.fill(dp, 1);
        int maxLength = 1;
        for (int i = 1; i < size; i++) {
            for (int j = 0; j < i; j++) {
                if (envelopes[i][1] > envelopes[j][1] && envelopes[i][0] > envelopes[j][0]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            maxLength = Math.max(maxLength, dp[i]);
        }
        return maxLength;
    }
}


// 思路1
// w升序排列，h降序排列 这样就能避免相同w的信封套娃 问题退化为求一维LIS
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        Arrays.sort(envelopes, (o1, o2) ->{
            // w相同，h降序排列
            if (o1[0] == o2[0]) {
                return o2[1] - o1[1];
            } else {
                // w升序排列
                return o1[0] - o2[0];
            }
        });
        int size = envelopes.length;
        int []HofEnvelopes = new int[size];
        for(int i = 0; i <size; i++) {
            HofEnvelopes[i] = envelopes[i][1];
        }
        return LIS(HofEnvelopes);
    }

    // LIS使用二分法+贪心，复杂度为o(nlogn)
    // binarySearch中的数组参数必须为升序的，检索返回情况：
    // 1 如果检索元素在数组内，返回i 表示arr[i]是搜索元素
    // 2 如果不在数组内，返回i(负数) 表示-i - 1是插入点，也就是第一个比搜索值大的元素
    // 3 i为-1(2的特殊情况，可以认为就是2) 表示i比数组所有元素小
    // 4 同理i为-length-1 表示i比所有数组元素大
    public int LIS(int []nums) {
        int end = 0;
        int size = nums.length;
        int []dp = new int[size];
        for(int num: nums) {
            int i = Arrays.binarySearch(dp,0,end, num);
            if (i < 0) {
                i = -i-1;
            }
            dp[i] = num;
            // 说明搜索值不在数组中且比所有元素大
            if (i == end) {
                end++;
            }
        }
        return end;
    }
}



