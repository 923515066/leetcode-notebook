你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。

给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。

 

示例 1：

输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2：

输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 3：

输入：nums = [0]
输出：0
 

提示：

1 <= nums.length <= 100
0 <= nums[i] <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



// 相对于打家劫舍I 需要考虑列表头尾两个房屋同时偷窃
// 所以这里分两种情况dp
// dp[i][1/0] i from 0 to (size-1)
// 第一种 明确nums[0]不偷窃，则dp[1][0] = 0, dp[1][1] = nums[1]
// dp循环从2开始,到size-1结束，也就是考虑盗窃最后一户
// 第二种 明确nums[0]偷窃，则dp[1][0] = nums[0],没有dp[1][1]
// dp[2][0] = nums[0] dp[2][1] = nums[0] + nums[2]
// dp循环从3 开始 到size-2结束，也就是不考虑盗窃最后一户
class Solution {
    public int rob(int[] nums) {
		int size = nums.length;
        if (size == 0) return 0;
        else if (size == 1) return nums[0];
		// max初始化要注意，如果初始化为0
		// 因为第二种情况只有size>3时才考虑 当size =2 / 3时可能会漏掉max=nums[0]的情况
        int max = nums[0];
        int dp_0 = 0, dp_1 = nums[1];
        max = Math.max(Math.max(dp_1, dp_0), max);
        for(int i = 2; i < size ; i++) {
			int tempDP_0 = dp_0;
            dp_0 = Math.max(dp_0, dp_1);
            dp_1 = tempDP_0+nums[i];
            max = Math.max(Math.max(dp_1, dp_0), max);
        }
        if (size > 3) {
            dp_0 = nums[0];
            dp_1 = nums[0] + nums[2];
            max = Math.max(Math.max(dp_1, dp_0), max);
        	for(int i = 3; i < size -1 ; i++) {
				int tempDP_0 = dp_0;
        	    dp_0 = Math.max(dp_0, dp_1);
        	    dp_1 = tempDP_0+nums[i];
        	    max = Math.max(Math.max(dp_1, dp_0), max);
        	}
        }
        return max;
    }
}