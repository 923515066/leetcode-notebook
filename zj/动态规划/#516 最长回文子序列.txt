给定一个字符串 s ，找到其中最长的回文子序列，并返回该序列的长度。可以假设 s 的最大长度为 1000 。

 

示例 1:
输入:

"bbbab"
输出:

4
一个可能的最长回文子序列为 "bbbb"。

示例 2:
输入:

"cbbd"
输出:

2
一个可能的最长回文子序列为 "bb"。

 


// 字符串翻转后同最长公共子序列
class Solution {
    public int longestPalindromeSubseq(String s) {
        int size = s.length();
        if (size <= 1) return size;
        StringBuffer str = new StringBuffer(s);
        StringBuffer revStr = new StringBuffer(s).reverse();
        int [][]dp = new int[size+1][size+1];
        dp[0][0] = 0; dp[0][1] = 0; dp[1][0] = 0;
        for(int i = 0; i <size; i++) {
            for(int j = 0; j <size; j++) {
                if (str.charAt(i) == revStr.charAt(j)) {
                    dp[i+1][j+1] = dp[i][j]  + 1;
                } else {
                    dp[i+1][j+1] = Math.max(dp[i][j+1], dp[i+1][j]);
                }
            }
        }
        return dp[size][size];
    }
}


// 或者直接中心对称dp
class Solution {
    public int longestPalindromeSubseq(String s) {
        int size = s.length();
        if (size <= 1) return size;
        char []str = s.toCharArray();
        int [][]dp = new int[size+1][size+1];
        dp[0][0] = 0; dp[0][1] = 0; dp[1][0] = 0;
        for(int i = 0; i <size; i++) {
            for(int j = size-1; j >= 0; j--) {
                if (str[i] == str[j]) {
                    dp[i+1][size - j] = dp[i][size - j -1]  + 1;
                } else {
                    dp[i+1][size - j] = Math.max(dp[i][size - j], dp[i+1][size - j - 1]);
                }
            }
        }
        return dp[size][size];
    }
}