#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;
void mergeSort(vector<int> &arr, int head, int tail, vector<int> &tempArr) {
    if (head >= tail) return;
    int mid = ((head + tail) >> 1);
    mergeSort(arr, head, mid, tempArr);
    mergeSort(arr, mid+1, tail, tempArr);
    
    int index1 = head, index2 = mid+1;
    int tempIndex = head;
    while(index1 <= mid && index2 <= tail) {
        if (arr[index1] < arr[index2]) {
            tempArr[tempIndex++] = arr[index1++];
        } else {
            tempArr[tempIndex++] = arr[index2++];
        }
    }
    while(index1 <= mid) {
        tempArr[tempIndex++] = arr[index1++];
    }
    while(index2 <= tail) {
        tempArr[tempIndex++] = arr[index2++];
    }
    for(int i = head; i <= tail; i++) {
        arr[i] = tempArr[i];
    }
}

bool findTarget(vector<int> &arr, int target) {
    int headIndex = 0, tailIndex = arr.size() -1;
    while(headIndex != tailIndex) {
        if (arr[headIndex] + arr[tailIndex] == target) return true;
        else if (arr[headIndex] + arr[tailIndex] > target) tailIndex--;
        else headIndex++;
    }
    return false;
}


int main() {
	int caseNum;
	cin>> caseNum;
	getchar();
	int nodeNum, target;
	vector<int> arr;
	int temp;
	for(int i = 0; i <caseNum; i++) {
	    cin>>nodeNum >> target;
	    getchar();
	    vector<int> tempArr(nodeNum);
	    for(int j = 0; j < nodeNum; j++) {
	        cin>>temp;
	        arr.push_back(temp);
	    }
	    mergeSort(arr, 0, nodeNum-1, tempArr);
	    if (findTarget(arr, target)) {
	        cout<<"yes"<<endl;
	    } else cout<<"no" << endl;
	    getchar();
	    arr.clear();
	}
}