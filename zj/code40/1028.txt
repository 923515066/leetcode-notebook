#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
using namespace std;
struct Pair{
    Pair(int n, int d):node(n),distance(d){}
    int node;
    int distance;
    bool operator<(const Pair& a) const
    {
        return distance < a.distance;
    }
};

struct tmp2 //重写仿函数
{
    bool operator() (Pair a, Pair b) 
    {
        return a.distance > b.distance; //看清楚了，这里是最小值优先
    }
};
// int shortestPath(vector<int> arr) {
//     priority_queue<tmp1, vector<tmp1>, tmp2> f;
// }


int main() {
	int caseNum;
	cin>> caseNum;
	getchar();
	int nodeNum, edgeNum, src, dest;
	int tempHead, tempTail, tempVal;
	for(int i = 0; i <caseNum; i++) {
	    cin >> nodeNum >> edgeNum >>src >> dest;
	    getchar();
	    vector<vector<Pair>> graph(nodeNum+1);
	    vector<int> ans(nodeNum+1, -1);
	    ans[src] = 0;
	    for(int j = 0; j <edgeNum; j++) {
	        cin >> tempHead >> tempTail >>tempVal;
	       // cout<<tempHead<<tempTail<<tempVal<<endl;
	        getchar();
	        graph[tempHead].push_back(Pair(tempTail, tempVal));
	        graph[tempTail].push_back(Pair(tempHead, tempVal));
	    }
	    priority_queue<Pair, vector<Pair>, tmp2> queue;
	    queue.push(Pair(src, 0));
	    
	    while(!queue.empty()) {
	        Pair temp = queue.top();
	        queue.pop();
	        int tempNode = temp.node;
	        int tempDis = temp.distance;
	        if (tempNode == dest) break;
	        if (tempDis > ans[tempNode]) continue;
	        for(int j = 0; j < graph[tempNode].size(); j++) {
	            Pair neighbor = graph[tempNode][j];
	            int neighborNode = neighbor.node;
	            int neighborDis = neighbor.distance;
	            int newDis = tempDis + neighborDis;
	            if (ans[neighborNode] == (-1) || newDis < ans[neighborNode]) {
	                ans[neighborNode] = newDis;
	                queue.push(Pair(neighborNode, newDis));
	            }
	        }
	    }
	    cout<<ans[dest]<<endl;
	}
}