//1007
#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <ctime>
#include <sstream>
#include <vector>
using namespace std;

int cal(string& str, int i, int j) {
    int value = 0;
    while(i <= j) {
        value = value*10 + (str[i] - '0');
        i++;
    }
    return value;
}

// 动态规划 m[j][i] = max{m[j-1][k] * a[i-k]}  a[i-k]表示从k乘到i
int getBiggestMultiSum(string str, int n, int k) {
    int pre_N_Multi_Sum[n+1];
    pre_N_Multi_Sum[0] = 0;
    for(int i = 1; i <=n; i++) {
        pre_N_Multi_Sum[i] = pre_N_Multi_Sum[i-1]*10 + (str[i-1] - '0');
    }
    int m[k+1][n+1];
    for(int j = 0; j <= k; j++) {
		// i从j+1开始，因为j表示划分为j+1段
        for(int i = j+1; i <= n; i++) {
            if (j == 0) m[j][i] = pre_N_Multi_Sum[i];
            else {
				// cal函数中注意str的对应索引要比n k 小1
				// i从j开始，因为j-1表示划分为j段
                int max = m[j-1][j] * cal(str, j, i-1);
                for(int p = j; p < i; p++ ) {
					// 注意str的对应索引要比n k 小1
                    int temp = m[j-1][p] * cal(str, p, i-1);
                    max = (temp > max)?temp:max;
                }
                m[j][i] = max;
            }
        }
    }
    return m[k][n];
}



int main() {
    int caseNum;
    cin >> caseNum;
    getchar();
    int n;
    int k;
    string val;
    for(int i = 0; i < caseNum; i++) {
        cin >> n;
        cin >>k;
        getchar();
        getline(cin, val);
        cout<<getBiggestMultiSum(val, n, k)<<endl;
    }
}
