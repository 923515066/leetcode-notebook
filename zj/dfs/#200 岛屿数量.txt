给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

 

示例 1:

输入:
[
['1','1','1','1','0'],
['1','1','0','1','0'],
['1','1','0','0','0'],
['0','0','0','0','0']
]
输出: 1
示例 2:

输入:
[
['1','1','0','0','0'],
['1','1','0','0','0'],
['0','0','1','0','0'],
['0','0','0','1','1']
]
输出: 3
解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。


// dfs，同时记录每个陆地节点是否访问过
class Solution {
    private char[][]grid;
    private int []xPosition = new int[]{-1, 0, 1, 0};
    private int []yPosition = new int[]{0, 1 , 0, -1};
    public int numIslands(char[][] grid) {
        if (grid.length == 0 || grid[0].length == 0) return 0;
        this.grid = grid;
        int landsNum = 0;
        int row = grid.length, col = grid[0].length;
        boolean [][] visited = new boolean[row][col]; 
        for (int i = 0; i < row; i++) {
            for(int j = 0; j <col;j++) {
                if (grid[i][j] == '0' || visited[i][j]) continue;
                landsNum++;
                dfs(visited, i ,j);
            }
        }
        return landsNum;
    }

    public void dfs(boolean [][]visited, int x, int y) {
        if (x < 0 || y < 0 || x >= visited.length || y >= visited[0].length) return;
        if (visited[x][y]) return;
        if (grid[x][y] == '0') return;
        visited[x][y] = true;
        for (int i = 0; i < 4; i++) dfs(visited, x+xPosition[i], y+yPosition[i]);
    }
}