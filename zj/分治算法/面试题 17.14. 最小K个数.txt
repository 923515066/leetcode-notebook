设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。

示例：

输入： arr = [1,3,5,7,2,4,6,8], k = 4
输出： [1,2,3,4]
提示：

0 <= len(arr) <= 100000
0 <= k <= min(100000, len(arr))


// 优先级队列
class Solution {
    public int[] smallestK(int[] arr, int k) {
		PriorityQueue<Integer> queue = new PriorityQueue<>((a, b) -> {
            return a-b;
        });
        for(int i = 0;i <arr.length; i++) {
            queue.offer(arr[i]);
        }
        int []ans = new int[k];
        for(int i = 0; i <k;i++) {
            ans[i] = queue.poll();
        }
        return ans;
    }
}

// 堆排序
class Solution {
    public int[] smallestK(int[] arr, int k) {
		int heapSize = arr.length;
		buildHeap(arr, heapSize);
        int []ans = new int[k];
        for (int i = 0; i <k; i++) {
            ans[i] = arr[0];
            swap(arr, 0, heapSize-1);
            heapSize--;
            modify(arr, 0, heapSize);
        }
        return ans;
    }

    public void buildHeap(int []arr, int heapSize) {
		for(int i = heapSize/2 - 1; i>= 0; i--) {
			modify(arr, i, heapSize);
        }
    }

    public void modify(int []arr, int index, int heapSize) {
		int max = index;
        int left = 2 * index + 1, right = 2 * index +2;
        if (left < heapSize && arr[left] <arr[max]) max = left;
        if (right < heapSize && arr[right] <arr[max]) max = right;

        if (max != index) {
            swap(arr, index, max);
            modify(arr, max, heapSize);
        }
    }

    public void swap(int []arr, int i , int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


// 快排
// 给出最小K个数不需要排序，所以快排相对于堆排序更快
class Solution {
    Random random = new Random();
    public int[] smallestK(int[] nums, int k) {
        if (k == 0) return new int[0];
		quickSelect(nums, 0, nums.length - 1, k);
        int []ans = new int[k];
        for(int i = 0; i<k;i++) {
            ans[i] = nums[i];
        }
        return ans;
    }

    public int quickSelect(int[] a, int l, int r, int index) {
        int q = randomPartition(a, l, r);
        // 不需要考虑数组是否排序完成，只要第k个位置确定了就完成了
        if (q == index) {
            return a[q];
        } else {
            return q < index ? quickSelect(a, q + 1, r, index) : quickSelect(a, l, q - 1, index);
        }
    }

    public int randomPartition(int[] a, int l, int r) {
        // 引入随机值避免极限测试用例
        // 随机范围l 到 r
        int i = random.nextInt(r - l + 1) + l;
        swap(a, i, r);
        return partition(a, l, r);
    }
	// 返回值表示数组中该位置的数值确定
    public int partition(int[] a, int l, int r) {
        // i 表示从左边到i 包括i本身的值都小于a[r]
        int x = a[r], i = l - 1;
        for (int j = l; j < r; ++j) {
            if (a[j] <= x) {
                swap(a, ++i, j);
            }
        }
        swap(a, i + 1, r);
        return i + 1;
    }

    public void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}