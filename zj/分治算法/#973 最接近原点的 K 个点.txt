我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。

（这里，平面上两点之间的距离是欧几里德距离。）

你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。

 

示例 1：

输入：points = [[1,3],[-2,2]], K = 1
输出：[[-2,2]]
解释： 
(1, 3) 和原点之间的距离为 sqrt(10)，
(-2, 2) 和原点之间的距离为 sqrt(8)，
由于 sqrt(8) < sqrt(10)，(-2, 2) 离原点更近。
我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。
示例 2：

输入：points = [[3,3],[5,-1],[-2,4]], K = 2
输出：[[3,3],[-2,4]]
（答案 [[-2,4],[3,3]] 也会被接受。）
 

提示：

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000




class Solution {
    // public int[][] kClosest(int[][] points, int K) {

    // }
    Random random = new Random();
    private int [][] points;
    public int[][] kClosest(int[][] points, int k) {
        if (k == 0) return new int[0][0];
        this.points = points;
		quickSelect(0, points.length - 1, k-1);
        int [][]ans = new int[k][2];
        for(int i = 0; i<k;i++) {
            ans[i] = points[i];
        }
        return ans;
    }

    public int quickSelect(int l, int r, int index) {
        int q = randomPartition(l, r);
        // 不需要考虑数组是否排序完成，只要第k个位置确定了就完成了
        if (q == index) {
            return 0;
        } else {
            return q < index ? quickSelect(q + 1, r, index) : quickSelect(l, q - 1, index);
        }
    }

    public int randomPartition(int l, int r) {
        // 引入随机值避免极限测试用例
        // 随机范围l 到 r
        int i = random.nextInt(r - l + 1) + l;
        swap(i, r);
        return partition(l, r);
    }
	// 返回值表示数组中该位置的数值确定
    public int partition(int l, int r) {
        // i 表示从左边到i 包括i本身的值都小于a[r]
        int x = dist(r), i = l - 1;
        for (int j = l; j < r; ++j) {
            if (dist(j) <= x) {
                swap(++i, j);
            }
        }
        swap(i + 1, r);
        return i + 1;
    }

    public int dist(int i) {
        return points[i][0] * points[i][0] + points[i][1] * points[i][1];
    }
    public void swap(int i, int j) {
        int temp1 = points[i][0], temp2 = points[i][1];
        points[i][0] = points[j][0];
        points[i][1] = points[j][1];
        points[j][0] = temp1;
        points[j][1] = temp2;
    }
}