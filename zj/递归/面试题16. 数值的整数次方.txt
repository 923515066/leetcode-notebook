实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。

 

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
 

说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。



// 二分法
class Solution {
    // 当n为偶数, x^n = (x^2)^(n/2)
    // 当n为奇数, x^n = x * (x^2)^(n/2)
    // 当n/2为偶数, x^n = ((x^2)^2)^(n/4)
    // 当n/2为奇数, x^n = x^2 * ((x^2)^2)^(n/4)
    public double myPow(double x, int n) {
        if (n == 0 || x == 1.0) return 1.0;
        // 个别测试用例n过大，取反越界，使用long保存
        long exp = n;
        if (exp < 0) {
            exp *= -1;
            x = 1/x;
        }
        double result = 1.0;
        while (exp != 0) {
            if ((exp & 1) != 0) {
                result *= x;
            }
            x = x * x;
            exp >>= 1; 
        }
        return result;
    }
}

// 两种思路代码相同
// 二进制法
class Solution {
    // 二进制转十进制 n = 1b_1 + 2b_2 + 4b_3 +... + 2^(m-1) * b_m  b_i属于 0/1
    // x^n = x^(1b_1 + 2b_2 + ... + 2^(m-1) * b_m) = x^(1b_1) * ... * x^(2^(m-1) * b_m)
    public double myPow(double x, int n) {
        if (n == 0 || x == 1.0) return 1.0;
        // 个别测试用例n过大，取反越界，使用long保存
        long exp = n;
        if (exp < 0) {
            exp *= -1;
            x = 1/x;
        }
        double result = 1.0;
        while (exp != 0) {
            if ((exp & 1) != 0) {
                result *= x;
            }
            x = x * x;
            exp >>= 1; 
        }
        return result;
    }
}