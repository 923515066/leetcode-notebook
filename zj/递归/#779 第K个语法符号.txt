在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。

给定行数 N 和序数 K，返回第 N 行中第 K个字符。（K从1开始）


例子:

输入: N = 1, K = 1
输出: 0

输入: N = 2, K = 1
输出: 0

输入: N = 2, K = 2
输出: 1

输入: N = 4, K = 5
输出: 1

解释:
第一行: 0
第二行: 01
第三行: 0110
第四行: 01101001

注意：

N 的范围 [1, 30].
K 的范围 [1, 2^(N-1)].


// 方法1 递归思想：左(右)子节点的值和父节点相同(相反)
class Solution {
    public int kthGrammar(int N, int K) {
        if (N == 1) return 0;
        // 在当前行的偶数位，与上一层父位的值相反
        if (K % 2 == 0) {
            return (kthGrammar(N - 1, (K + 1) / 2) == 0) ? 1 : 0;
        } 
        // 在当前行的奇数位，与上一层父位的值相同
        else {
            return kthGrammar(N - 1, (K + 1) / 2);
        }
    }
}

// 方法2 将当前行拆分成两部分，右半部分是左半部分的翻转，左半部分与上层相同
class Solution {
    public int kthGrammar(int N, int K) {
        if (N == 1) return 0;
        // 当前行的位数的一半
        int len = 1 << (N - 2);
        if (K > len) {
            return kthGrammar(N - 1, K - len) ^ 1;
        } else {
            return kthGrammar(N - 1, K);
        }
    }
}