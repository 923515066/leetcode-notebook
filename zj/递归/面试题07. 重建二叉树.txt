输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。

 

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7
 

限制：

0 <= 节点个数 <= 5000



// 思路同105. 从前序与中序遍历序列构造二叉树
class Solution {
    private int []preorder;
    private int []inorder;
    private int preIndex = 0;
    private Map<Integer, Integer> hashmap = new HashMap<>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder.length == 0) return null;
        this.preorder = preorder;
        this.inorder = inorder;
        for (int i = 0; i < inorder.length; i++) {
            hashmap.put(inorder[i], i);
        }
        return buildTreeCore(0, preorder.length-1);
    }

    public TreeNode buildTreeCore(int in_left, int in_right) {
        if (in_left > in_right) return null;
        int i = preIndex++;
        TreeNode root= new TreeNode(preorder[i]);
        root.left = buildTreeCore(in_left, hashmap.get(preorder[i]) - 1);
        root.right = buildTreeCore(hashmap.get(preorder[i]) + 1, in_right);
        return root;
    }
}