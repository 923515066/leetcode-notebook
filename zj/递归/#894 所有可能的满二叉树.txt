满二叉树是一类二叉树，其中每个结点恰好有 0 或 2 个子结点。

返回包含 N 个结点的所有可能满二叉树的列表。 答案的每个元素都是一个可能树的根结点。

答案中每个树的每个结点都必须有 node.val=0。

你可以按任何顺序返回树的最终列表。

 

示例：

输入：7
输出：[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
解释：

 

提示：

1 <= N <= 20



// 注意这里与递归遍历不同，需要返回所有可能的满二叉树结果，也就是每种可能都有构建一个新的根节点
// 满二叉树只可能为奇数个结点，满二叉树的子节点也是满二叉树
// 每次循环判断当前节点所有左右结点个数的可能情况，然后递归调用获取左右子树在某一节点数量时的可能列表，进行拼装
// 可以使用一个哈希表保存数量为N时满二叉树所有可能的情况避免重复计算
class Solution {
    private Map<Integer, List<TreeNode>> saveResult = new HashMap<>();
    public List<TreeNode> allPossibleFBT(int N) {
        // 特判，传入偶数值
        if (N % 2 == 0) return new ArrayList<>();
        if (N == 1) {
            List<TreeNode> list = new ArrayList<>();
            list.add(new TreeNode(0));
            return list;
        }
        if (saveResult.get(N) != null) return saveResult.get(N);
        List<TreeNode> list = new ArrayList<>();
        // 左右子树所有可能的节点数量情况
        for (int i = 1; i <= N - 2; i += 2) {
            for (TreeNode left : allPossibleFBT(i)) {
                for (TreeNode right : allPossibleFBT(N - i - 1)) {
                    TreeNode node = new TreeNode(0);
                    node.left = left;
                    node.right = right;
                    list.add(node);
                }
            }
        }
        if (saveResult.get(N) == null) {
            saveResult.put(N, list);
        }
        return list;
    }
}