返回与给定的前序和后序遍历匹配的任何二叉树。

 pre 和 post 遍历中的值是不同的正整数。

 

示例：

输入：pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
输出：[1,2,3,4,5,6,7]
 

提示：

1 <= pre.length == post.length <= 30
pre[] 和 post[] 都是 1, 2, ..., pre.length 的排列
每个输入保证至少有一个答案。如果有多个答案，可以返回其中一个。



class Solution {
    private int[]pre;
    private int []post;
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
		this.pre = pre;
        this.post = post;
		TreeNode root =  dfs(0, pre.length-1, 0, post.length-1);
        return root;
    }

    public TreeNode dfs(int preHead, int preTail, int postHead, int postTail) {
        if (preHead > preTail || postHead > postTail) return null;
        if (preHead == preTail) return new TreeNode(pre[preHead]);
        TreeNode node = new TreeNode(pre[preHead]);
		int tempIndex1 = preHead+1;
        int tempIndex2 = postHead;
        int leftSonLength = 1;
        while(post[tempIndex2] != pre[preHead+1]) {
            tempIndex2++;
            tempIndex1++;
        }
        node.left = dfs(preHead+1, tempIndex1, postHead, tempIndex2);
        node.right = dfs(tempIndex1+1, preTail, tempIndex2+1, postTail-1);
        return node;
    }
}

// 尝试官方题解做法