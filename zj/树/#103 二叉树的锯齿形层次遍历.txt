给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]



 // 递归遍历还是标准的前序遍历
//  根据节点处于奇数层还是偶数层，将节点插入尾部或者头部
class Solution {
    private List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        dfs(root, 0, true);
        return ans;
    }

    public void dfs(TreeNode root, int level, boolean odd) {
        if (root == null) return;
        if (level == ans.size()) {
            ans.add(new LinkedList<>());
        }
        if (odd) {
            ans.get(level).add(root.val);
        } else {
            ans.get(level).add(0,root.val);
        }
        dfs(root.left, level+1, !odd);
        dfs(root.right, level+1, !odd);
    }
}


// 可以考虑获取每一层的正序遍历后，将偶数层进行链表反转



// 也可以考虑使用两个栈(奇数层栈，偶数层栈，倒来倒去)
