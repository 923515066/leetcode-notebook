给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:

输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
   
//  递归思路：假设当前节点为J，左子树范围为1..j-1  右子树范围为j+1...n
// 然后两颗子树两层迭代超级拼装
// 若 left > right 考虑子树为null的情况 返回链表，链表中包含唯一值null

// 改进：使用哈希表保存i..j的所有可能性，减少递归次数，发现改进不大。。
class Solution {
    private Map<Integer, Map<Integer, List<TreeNode>>> cache = new HashMap<Integer, Map<Integer, List<TreeNode>>>();
    public List<TreeNode> generateTrees(int n) {
        if (n <= 0) return new ArrayList<TreeNode>();
        List<TreeNode> list = generateTreesCore(1, n);
        return list;
    }

    public List<TreeNode> generateTreesCore(int left, int right) {
        if (right < left) {
            List<TreeNode> list =  new ArrayList<TreeNode>();
            list.add(null);
            return list;
        }
        else if (left == right) {
            List<TreeNode> list = new ArrayList<TreeNode>();
            list.add(new TreeNode(left));
            return list;
        }
        if (cache.get(left) != null && cache.get(left).get(right) != null) {
            return cache.get(left).get(right);
        }
        List<TreeNode> currList = new ArrayList<TreeNode>();
        for (int index = left; index <= right; index++) {
            List<TreeNode> leftSonList = generateTreesCore(left, index-1);
            List<TreeNode> rightSonList = generateTreesCore(index+1, right);
            for (TreeNode leftSon : leftSonList) {
                for (TreeNode rightSon :rightSonList) {
                    TreeNode root = new TreeNode(index);
                    root.left = leftSon;
                    root.right = rightSon;
                    currList.add(root);
                }
            }
        }
        if (cache.get(left) == null ) {
            Map<Integer, List<TreeNode>> map = new HashMap<Integer, List<TreeNode>>();
            map.put(right, currList);
            cache.put(left, map);
        } else if (cache.get(left).get(right) == null) {
            cache.get(left).put(right, currList);
        }
        return currList;
    }
}


// 尝试用动态规划思路完成