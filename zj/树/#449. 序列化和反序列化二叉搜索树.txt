序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。

设计一个算法来序列化和反序列化二叉搜索树。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。

编码的字符串应尽可能紧凑。

注意：不要使用类成员/全局/静态变量来存储状态。 你的序列化和反序列化算法应该是无状态的。


// 先序遍历存储节点值，读取时因为题目要求不能保存中间状态
// 先遍历一遍字符串 读取节点值存储为链表，后续思路同1008先序遍历构造二叉搜索树
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeCore(root, sb);
        return sb.toString();
    }

    public void serializeCore(TreeNode root, StringBuilder sb) {
		if (root == null) return;
        sb.append(root.val + " ");
        serializeCore(root.left, sb);
        serializeCore(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        List<Integer> list = new LinkedList<>();
        int strIndex = 0;
        int temp = 0;
        while(strIndex < data.length()) {
            temp = 0;
            for (; strIndex < data.length() && data.charAt(strIndex) != ' '; strIndex++) {
                temp = temp*10 + (data.charAt(strIndex) - '0');
            }
            list.add(temp);
            strIndex++;
        }
        TreeNode root =  deserializeCore(list, Integer.MAX_VALUE, Integer.MIN_VALUE);
        return root;
    }

    public TreeNode deserializeCore(List<Integer> list, int max, int min) {
		if (list.size() == 0 || list.get(0) <min || list.get(0) > max) return null;
        int value = list.remove(0);
        TreeNode node = new TreeNode(value);
        node.left = deserializeCore(list, value, min);
        node.right = deserializeCore(list, max, value);
        return node;
    }
}
