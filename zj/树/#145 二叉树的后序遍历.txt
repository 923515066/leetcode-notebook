给定一个二叉树，返回它的 后序 遍历。

示例:

输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [3,2,1]
进阶: 递归算法很简单，你可以通过迭代算法完成吗？


// 也是类似迭代前序遍历用一个栈保存访问过的节点，但是在第一次弹出时(代表这个节点左子树遍历完成)再次压入栈，
// 同时压入一个标记位，第二次弹出时(先弹出标记位)说明右子树遍历完成
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new LinkedList<>();
        TreeNode curr = root;
        Stack<TreeNode> stack = new Stack<>();
        while(curr != null) {
            stack.push(curr);
            curr = curr.left;
        }
        while(!stack.isEmpty()) {
            if (stack.peek() == null) {
                stack.pop();
                list.add(stack.pop().val);
            } else {
                curr = stack.peek().right;
                stack.push(null);
                while(curr != null) {
                    stack.push(curr);
                    curr = curr.left;
                }
            }
        }
        return list;
    }
}

//可以尝试递归/或者先序遍历后链表反转