//  中序遍历(非递减排序)，然后记录出现频率最高的节点值
给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。

假定 BST 有如下定义：

结点左子树中所含结点的值小于等于当前结点的值
结点右子树中所含结点的值大于等于当前结点的值
左子树和右子树都是二叉搜索树
例如：
给定 BST [1,null,2,2],

   1
    \
     2
    /
   2
返回[2].

提示：如果众数超过1个，不需考虑输出顺序

进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）




class Solution {
    private int maxNum = 0;
    private int currTime = 0;
    private Integer lastOne = null;
    private List<Integer> mostFre = new ArrayList<>();
    public int[] findMode(TreeNode root) {
        if(root == null) return new int[0];
        dfs(root);
        int a[] = new int[mostFre.size()];
        for (int i = 0; i < mostFre.size(); i++) {
            a[i] = mostFre.get(i);
        }
        return a;
    }

    public void dfs(TreeNode root) {
        if (root == null) return;
        dfs(root.left);
        if (lastOne == null || lastOne != root.val) {
            currTime = 1;
        } else {
            currTime++;
        }
        if (currTime == maxNum) {
            mostFre.add(root.val);
        } else if (currTime > maxNum) {
            mostFre = new ArrayList<>();
            mostFre.add(root.val);
            maxNum = currTime;
        }
        lastOne = root.val;
        dfs(root.right);
    }


}