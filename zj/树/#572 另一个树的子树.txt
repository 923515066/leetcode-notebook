给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。

示例 1:
给定的树 s:

     3
    / \
   4   5
  / \
 1   2
给定的树 t：

   4 
  / \
 1   2
返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。

示例 2:
给定的树 s：

     3
    / \
   4   5
  / \
 1   2
    /
   0
给定的树 t：

   4
  / \
 1   2
返回 false。



// 递归思想：t要么和当前根节点开始匹配，要么是当前节点的任意一棵子树
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if (s == null && t != null) return false;
		// 把isSameTree放在最后，力扣实测执行用时快6ms？？
        return  isSubtree(s.left, t) || isSubtree(s.right, t) || isSametree(s, t);
    }

    public boolean isSametree(TreeNode s, TreeNode t) {
        if (s == null || t == null) {
            if (s == null && t == null) return true;
            return false;
        } 
        if (s.val != t.val) return false;
        return isSametree (s.left, t.left) && isSametree(s.right, t.right);
    }
}




//  KMP解法
class Solution {
    private StringBuilder sb_s = new StringBuilder();
    private StringBuilder sb_t = new StringBuilder();
    private int []next;
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if (s == null && t != null) return false;
        preOrder(s, sb_s);
        preOrder(t, sb_t);
        return kmp(sb_s.toString(), sb_t.toString());
    }

// 获取二叉树对应的先序遍历字符串(子节点为null的话插入'l'or'r'使得树形状和遍历字符串唯一对应)
    public void preOrder(TreeNode root, StringBuilder sb) {
        // s表示当前节点开始，不然类似[12][2]这种测试用例无法通过
        sb.append("s" + root.val);
        if (root.left != null) {
            preOrder(root.left, sb);
        } else {
            sb.append('l');
        }
        if (root.right != null) {
            preOrder(root.right, sb);
        } else {
            sb.append('r');
        }

    }
    public boolean kmp(String str, String pattern) {
        int str_i = 0;
        int pat_j = 0;
        int len_str = str.length();
        int len_pat = pattern.length();
        if (len_pat == 0 || len_str == 0) {
            if (len_pat == 0) return true;
            else if (len_str == 0) return false;
        }
        getNext(pattern);
        while (str_i < len_str && pat_j < len_pat) {
            if (pat_j == -1 || str.charAt(str_i) == pattern.charAt(pat_j)) {
                str_i++;
                pat_j++;
            } else {
                pat_j = next[pat_j];
            }
        }
        if (pat_j == len_pat) {
            return true;
        }
        return false;
    }

    public void getNext(String pattern) {
        next = new int[pattern.length()];
        next[0] = -1;
        int k = -1;
        int pat_j = 0;
        while (pat_j < (pattern.length() - 1) ) {
            if (k == -1 || pattern.charAt(pat_j) == pattern.charAt(k)) {
                k++;
                pat_j++;
                next[pat_j] = k;
            } else {
                k = next[k];
            }
        }
    }
}