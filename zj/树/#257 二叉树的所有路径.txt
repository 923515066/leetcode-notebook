给定一个二叉树，返回所有从根节点到叶子节点的路径。

说明: 叶子节点是指没有子节点的节点。

示例:

输入:

   1
 /   \
2     3
 \
  5

输出: ["1->2->5", "1->3"]

解释: 所有根节点到叶子节点的路径为: 1->2->5, 1->3




class Solution {
    private List<String> pathList = new LinkedList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        dfs(root, new StringBuilder(""));
        return pathList;
    }
    public void dfs(TreeNode root, StringBuilder str) {
        if (root == null) return;
        // 把当前节点的数值 和 “->”分开插入，否则会出现root节点需要特殊判断的情况
        else str.append(Integer.toString(root.val));
        if (root.left == null && root.right == null) {
            pathList.add(str.toString());
        }
        else {
            dfs(root.left, new StringBuilder(str).append("->"));
            dfs(root.right, new StringBuilder(str).append("->"));
        }
    }
}