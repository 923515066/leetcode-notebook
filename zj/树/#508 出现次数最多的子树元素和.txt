给你一个二叉树的根结点，请你找出出现次数最多的子树元素和。一个结点的「子树元素和」定义为以该结点为根的二叉树上所有结点的元素之和（包括结点本身）。

你需要返回出现次数最多的子树元素和。如果有多个元素出现的次数相同，返回所有出现次数最多的子树元素和（不限顺序）。

 

示例 1：
输入:

  5
 /  \
2   -3
返回 [2, -3, 4]，所有的值均只出现一次，以任意顺序返回所有值。

示例 2：
输入：

  5
 /  \
2   -5
返回 [2]，只有 2 出现两次，-5 只出现 1 次。

 

提示： 假设任意子树元素和均可以用 32 位有符号整数表示。




//  递归后续遍历，计算每个节点的子树元素和  
// 使用hashmap保存，每个元素和的出现次数
// maxtimes记录最高频率
// 栈保存出现次数为最高频的所有元素和，如果出现了更高频次，栈清空再存入新的值
class Solution {
    private Map<Integer, Integer> map= new HashMap<>();
    private Stack<Integer> stack = new Stack<>();
    private int maxTimes = 0;
    // private int mostFrequentValue = 0;
    public int[] findFrequentTreeSum(TreeNode root) {
        findFrequentTreeSumCore(root);
        if (maxTimes ==0 ) return new int[0];
        int stackSize = stack.size();
        int []ans = new int[stackSize];
        for (int i = 0; i < stackSize; i++ ) ans[i] = stack.pop();
        return ans;
    }

    public int findFrequentTreeSumCore(TreeNode root) {
        if (root == null) return 0;
        int currSum = root.val + findFrequentTreeSumCore(root.left) + findFrequentTreeSumCore(root.right);
        int temp = map.getOrDefault(currSum, 0);
        if (temp == 0) {
            map.put(currSum, 1);
        } else {
            map.put(currSum, temp+1);
        }
        if (temp+1 > maxTimes) {
            maxTimes = temp+1;
            stack.removeAllElements();
            stack.push(currSum);
        } else if (temp + 1 == maxTimes) stack.push(currSum);
        return currSum;
    }
}