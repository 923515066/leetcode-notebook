在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。

如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。

我们给出了具有唯一值的二叉树的根节点 root，以及树中两个不同节点的值 x 和 y。

只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true。否则，返回 false。

 

示例 1：


输入：root = [1,2,3,4], x = 4, y = 3
输出：false
示例 2：


输入：root = [1,2,3,null,4,null,5], x = 5, y = 4
输出：true
示例 3：



输入：root = [1,2,3,null,4], x = 2, y = 3
输出：false
 

提示：

二叉树的节点数介于 2 到 100 之间。
每个节点的值都是唯一的、范围为 1 到 100 的整数。




//  使用两个哈希表保存每个节点的层数和父节点引用
// 如果层数相同并且父节点相同，则为堂兄弟节点
// class Solution {
//     private Map<Integer, Integer> depth = new HashMap<>();
//     private Map<Integer, TreeNode> parent = new HashMap<>();
//     public boolean isCousins(TreeNode root, int x, int y) {
//         dfs(root,null);
//         return (depth.get(x) == depth.get(y) && parent.get(x) != parent.get(y));
//     }
//     public void dfs(TreeNode node, TreeNode par) {
//         if (node != null) {
//             depth.put(node.val, (par == null)?0:depth.get(par.val)+1);
//             parent.put(node.val, par);
//             dfs(node.left, node);
//             dfs(node.right, node);
//         }
//     }
// }


// 简单dfs，不使用hashmap(反而更快)
class Solution {
    private Integer firstNodeLevel = null;
    private TreeNode firstNodePar = null;
    private int x, y;
    private boolean ans;
    public boolean isCousins(TreeNode root, int x, int y) {
        this.x = x;
        this.y = y;
        dfs(root,null, 0);
        return ans;
    }
    public void dfs(TreeNode node, TreeNode par, int level) {
        if (node != null) {
            if (node.val == x || node.val == y) {
                if (firstNodeLevel == null) {
                    firstNodeLevel = level;
                    firstNodePar = par;
                } else {
                    ans = (firstNodeLevel == level && firstNodePar != par);
                    return;
                }
            }
            dfs(node.left, node, level+1);
            dfs(node.right, node, level+1);
        }
    }
}