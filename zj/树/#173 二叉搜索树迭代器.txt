实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。

调用 next() 将返回二叉搜索树中的下一个最小的数。

 

示例：



BSTIterator iterator = new BSTIterator(root);
iterator.next();    // 返回 3
iterator.next();    // 返回 7
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 9
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 15
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 20
iterator.hasNext(); // 返回 false
 

提示：

next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。
你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。



//  思路：参考中序遍历，链表保存遍历结果
// 空间复杂度不符合要求o(h)
class BSTIterator {
    private List<Integer> treeVal = new LinkedList<Integer>();
    public BSTIterator(TreeNode root) {
        Inorder(root);
    }

    public void Inorder(TreeNode root) {
        if (root == null) return;
        Inorder(root.left);
        treeVal.add(root.val);
        Inorder(root.right);
    }
    
    /** @return the next smallest number */
    public int next() {
        return treeVal.remove(0);
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !treeVal.isEmpty();
    }
}


// 思路：非递归中序遍历，调用next()的时候pop当前访问节点，然后循环push右节点的左子树。
// 栈的深度不会超过树的高度
// next()时间复杂度 官方题解称平均复杂度为O(1) 那我信了
class BSTIterator {
    public Stack<TreeNode> valStack = new Stack<TreeNode>();
    private TreeNode pushNode = null;
    private TreeNode popNode = null;
    public BSTIterator(TreeNode root) {
        pushNode = root;
        while(pushNode != null) {
            valStack.push(pushNode);
            pushNode = pushNode.left;
        }
    }

    
    /** @return the next smallest number */
    public int next() {
        popNode = valStack.pop();
        pushNode = popNode.right;
        while(pushNode != null) {
            valStack.push(pushNode);
            pushNode = pushNode.left;
        }
        return popNode.val;
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !valStack.isEmpty();
    }
}