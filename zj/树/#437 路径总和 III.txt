给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11


// 思路：递归函数中每个节点都考虑作为这段路径的初始节点
class Solution {
    private int pathNum = 0;
    public int pathSum(TreeNode root, int sum) {
        pathSumCore(root, sum);
        return pathNum;
    }

    public void pathSumCore(TreeNode root, int sum) {
        if (root == null) return;
        pathSumCore(root.left, sum);
        pathSumCore(root.right, sum);
        func1(root, sum, 0);
    }

    public void func1(TreeNode root, int sum, int curr) {
        if (root == null) return;
        if (curr + root.val == sum) pathNum++;
        func1(root.left, sum, curr+ root.val);
        func1(root.right, sum, curr+ root.val);
    }
}