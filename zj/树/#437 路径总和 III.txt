给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11


// 思路：递归函数中每个节点都考虑作为这段路径的初始节点
class Solution {
    private int pathNum = 0;
    public int pathSum(TreeNode root, int sum) {
        pathSumCore(root, sum);
        return pathNum;
    }

    public void pathSumCore(TreeNode root, int sum) {
        if (root == null) return;
        pathSumCore(root.left, sum);
        pathSumCore(root.right, sum);
        func1(root, sum, 0);
    }

    public void func1(TreeNode root, int sum, int curr) {
        if (root == null) return;
        if (curr + root.val == sum) pathNum++;
        func1(root.left, sum, curr+ root.val);
        func1(root.right, sum, curr+ root.val);
    }
}




 // 思路：用hashmap记录当前遍历父节点的前缀和，如果当前节点的前缀和 减 sum 出现过，
//  则说明存在至少一条路径，路径和为sum。

// 注意：祖先节点中 前缀和为 “当前节点的前缀和 减 sum” 的节点 不在该路径中 比如1->1->2->3->4  10 中的第一个节点(前缀和为11-10 == 1)
// 所以如果路径从根节点开始比如1->2->3->4  10，我们需要在遍历根节点前虚拟一个类似链表中的哨兵节点，前缀和为0

// 同时，如果路径和sum为0，注意特殊情况判断

// 因为路径只能是从父节点到子节点，在当前节点先序遍历完成后需要从hashmap中删除当前节点的前缀和
class Solution {
    private Map<Integer, Integer> hashmap = new HashMap<Integer, Integer>();
    private int pathNum = 0;
    public int pathSum(TreeNode root, int sum) {
        if (root == null) return 0;
        // 虚拟哨兵前缀
        hashmap.put(0, 1);
        pathSumCore(root, sum, 0);
        return pathNum;
    }

    public void pathSumCore(TreeNode root, int sum, int curr) {
        if (root == null) return;

        if (hashmap.containsKey(curr+root.val)) {
            hashmap.put(curr+root.val, hashmap.get(curr+root.val)+1);
        }else {
            hashmap.put(curr+root.val, 1);
        }
        if (hashmap.containsKey(curr + root.val - sum)) {
            if (sum != 0)
                pathNum += hashmap.get(curr + root.val - sum);
            else
                pathNum += (hashmap.get(curr + root.val - sum) - 1);
        }
        pathSumCore(root.left, sum, curr+root.val);
        pathSumCore(root.right, sum, curr+root.val);
        if (hashmap.get(curr+root.val) > 1) {
            hashmap.put(curr+root.val, hashmap.get(curr+root.val)-1);
        }else {
            hashmap.remove(curr+root.val);
        }
    }
}