给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。

示例:

输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
  
  
//  思路：逆序  前序遍历  记录每层最先见到的节点(也就是该层最右节点)的值
class Solution {
    private List<Integer> levelMostRight = new LinkedList<>();
    public List<Integer> rightSideView(TreeNode root) {
		rightSideViewCore(root, 0);
        return levelMostRight;
    }

    public void rightSideViewCore(TreeNode root, int level) {
		if (root == null) return;
        if (level >= levelMostRight.size()) levelMostRight.add(root.val);
        rightSideViewCore(root.right, level+1);
        rightSideViewCore(root.left, level+1); 
    }
}