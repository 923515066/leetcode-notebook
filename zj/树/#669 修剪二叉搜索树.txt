给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在[L, R]中 (R>=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。

示例 1:

输入: 
    1
   / \
  0   2

  L = 1
  R = 2

输出: 
    1
      \
       2
示例 2:

输入: 
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3

输出: 
      3
     / 
   2   
  /
 1

 
 
// 如果节点比L边界小 或者比R边界大，则返回它的子树
class Solution {
    private int L,R;
    public TreeNode trimBST(TreeNode root, int L, int R) {
        this.L = L;
        this.R = R;
        return dfs(root);
    }
    public TreeNode dfs(TreeNode root) {
        if (root == null) return null;
        if (root.val < L) {
            return dfs(root.right);
        } else if (root.val > R) {
            return dfs(root.left);
        } else {
            root.left = dfs(root.left);
            root.right = dfs(root.right);
            return root;
        }
    }
}