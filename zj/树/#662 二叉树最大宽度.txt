给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与满二叉树（full binary tree）结构相同，但一些节点为空。

每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间的长度。

示例 1:

输入: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

输出: 4
解释: 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。

示例 4:

输入: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
输出: 8
解释: 最大值出现在树的第 4 层，宽度为 8 (6,null,null,null,null,null,null,7)。



//  思路参考199 获取每一层的最右节点
// 先假定树为完全二叉树，获取每一层最左节点在完全二叉树的索引(子节点为父节点的2n 2n+1)
// 然后获取每一层最右节点在完全二叉树中的索引与最左节点的差值
// 使用int标志位biggestWidth记录最大值
class Solution {
    private List<Integer> leftList = new ArrayList<>();
    private List<Integer> rightList = new ArrayList<>();
    private int biggestWidth = 0;
    public int widthOfBinaryTree(TreeNode root) {
        levelMostLeft(root, 0, 1);
        levelMostRight(root, 0, 1);
        return biggestWidth;
    }

    public void levelMostLeft(TreeNode root, int level, int index) {
        if (root == null) return;
        if (level >= leftList.size()) leftList.add(index);
        levelMostLeft(root.left, level+1, 2*index);
        levelMostLeft(root.right, level+1, 2*index+1); 
    }

    public void levelMostRight(TreeNode root, int level, int index) {
        if (root == null) return;
        if (level >= rightList.size()) {
            rightList.add(index);
            if (index - leftList.get(level) + 1 > biggestWidth) biggestWidth = index - leftList.get(level) + 1;
        }
        levelMostRight(root.right, level+1,2*index+1); 
        levelMostRight(root.left, level+1,2*index);
    }
}



// 可以尝试下官方题解的思路
//  官方题解2
// map记录每一层第一个见到的节点(最左节点)
// 遍历所有计算节点与该层最左节点的宽度
// ans记录最大宽度
class Solution {
    int ans = 0;
    Map<Integer, Integer> left = new HashMap<>();
    public int widthOfBinaryTree(TreeNode root) {
        dfs(root, 0, 1);
        return ans;
    }
    public void dfs(TreeNode root, int depth, int pos) {
        if (root == null) return;
        left.computeIfAbsent(depth, x-> pos);
        ans = Math.max(ans, pos - left.get(depth) + 1);
        dfs(root.left, depth + 1, 2 * pos);
        dfs(root.right, depth + 1, 2 * pos + 1);
    }
}
