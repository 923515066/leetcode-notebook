给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。

说明: 叶子节点是指没有子节点的节点。

示例:
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:

[
   [5,4,11,2],
   [5,8,4,5]
]



class Solution {
    public List<List<Integer>> pathList = new ArrayList<>();
    public ArrayList<Integer> tempPath = new ArrayList<>();
    public int tag;
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        tag = sum;
		dfs(root, 0);
        return pathList;
    }

    public void dfs(TreeNode root, int sum) {
		if (root == null) return;
        tempPath.add(root.val);
        if (root.left == null && root.right == null && sum + root.val == tag) {
			List<Integer> newList = new LinkedList<>();
            for(int i = 0; i < tempPath.size();i++) {
                newList.add(tempPath.get(i));
            }
            pathList.add(newList);
        } else {
        	dfs(root.left, sum + root.val);
			dfs(root.right, sum + root.val);
        }
		tempPath.remove(tempPath.size()-1);
    }
}


// 作为回溯target刷题
// 20220105
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return new LinkedList<>();
        }
        List<List<Integer>> ans = new LinkedList<>();
        dfs(root, targetSum, ans, new LinkedList<Integer>());
        return ans;

    }

    public void dfs(TreeNode root, int left, List<List<Integer>> ans, LinkedList<Integer> curr) {
        curr.add(root.val);
        left -= root.val;

        if (left == 0 && root.left == null && root.right == null) {
            ans.add(new LinkedList<Integer>(curr));
        }

        if (root.left != null) {
            dfs(root.left, left, ans, curr);
        }
        if (root.right != null) {
            dfs(root.right, left, ans, curr);
        }

        left += root.val;
        curr.removeLast();

    }
}