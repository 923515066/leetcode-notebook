给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。

给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。

示例 1:

输入: 
    2
   / \
  2   5
     / \
    5   7

输出: 5
说明: 最小的值是 2 ，第二小的值是 5 。
示例 2:

输入: 
    2
   / \
  2   2

输出: -1
说明: 最小的值是 2, 但是不存在第二小的值。

// 递归遍历寻找次小值，如果当前节点的值不是最小值(可能为次小值)，子树后续节点无需遍历
class Solution {
    private Integer secondMini = null;
    public int findSecondMinimumValue(TreeNode root) {
        findSec(root, root.val);
        if (secondMini == null || secondMini == root.val) return -1;
        return secondMini;
    }
    public void findSec(TreeNode root, int mini) {
        if (root == null) return;
        if (root.val == mini) {
            findSec(root.left, mini);
            findSec(root.right, mini);
        } else if (secondMini == null || root.val < secondMini){
            secondMini = root.val;
        }
    }
}