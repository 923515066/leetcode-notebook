给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。

一般来说，删除节点可分为两个步骤：

首先找到需要删除的节点；
如果找到了，删除它。
说明： 要求算法时间复杂度为 O(h)，h 为树的高度。

示例:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。

一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。

    5
   / \
  4   6
 /     \
2       7

另一个正确答案是 [5,2,6,null,4,null,7]。

    5
   / \
  2   6
   \   \
    4   7
	
	
//  思路：1.找到删除的节点(注意deleteNode函数中递归的调用方式)
// 2.确定删除节点时，选择左子树中最大节点进行替换,注意要删除替换节点与原父节点的联系(用替换节点的左子树替换自身)
// 删除节点的左右子树赋值给替换节点的左右子树
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null) return null;
        if (root.val == key) {
            if (root.left == null && root.right == null) {
                return null;
            } else if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            } else {
                TreeNode replaceNode = mostRightNode(root.left, root);
                // 删除节点的左右子树赋值给替换节点的左右子树
                replaceNode.left = root.left;
                replaceNode.right = root.right;
                return replaceNode;
            }
        }
        root.left = deleteNode(root.left, key);
        root.right = deleteNode(root.right, key);
        return root;
    }

    // 返回替换节点，同时切断替换节点原有的联系
    public TreeNode mostRightNode(TreeNode root, TreeNode pre) {
        if (root.right != null) {
            return mostRightNode(root.right, root);
        } else {
            if (pre.right == root) {
                pre.right = root.left;
            } else {
                pre.left = root.left; 
            }
            return root;
        }
        
    }
}