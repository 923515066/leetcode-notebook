给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：

二叉树的根是数组中的最大元素。
左子树是通过数组中最大值左边部分构造出的最大二叉树。
右子树是通过数组中最大值右边部分构造出的最大二叉树。
通过给定的数组构建最大二叉树，并且输出这个树的根节点。

 

示例 ：

输入：[3,2,1,6,0,5]
输出：返回下面这棵树的根节点：

      6
    /   \
   3     5
    \    / 
     2  0   
       \
        1
 

提示：

给定的数组的大小在 [1, 1000] 之间。




//  记录当前子树 数组范围内最大值的索引 然后递归生成左右子树
class Solution {
    private int[] nums;
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if (nums.length == 0) return null;
		this.nums = nums;
		return constructTree(0, nums.length-1);
    }

    public TreeNode constructTree(int head, int tail) {
        if (tail < head) return null;
        if (head == tail) return new TreeNode(nums[head]);
        int maxIndex = head;
        for (int i = head; i <= tail; i++) {
            if (nums[i] > nums[maxIndex]) maxIndex = i;
        }
        TreeNode node = new TreeNode(nums[maxIndex]);
        node.left = constructTree(head, maxIndex-1);
        node.right = constructTree(maxIndex+1, tail);
        return node;
    }
}