在一个 m*n 的二维字符串数组中输出二叉树，并遵守以下规则：

行数 m 应当等于给定二叉树的高度。
列数 n 应当总是奇数。
根节点的值（以字符串格式给出）应当放在可放置的第一行正中间。根节点所在的行与列会将剩余空间划分为两部分（左下部分和右下部分）。你应该将左子树输出在左下部分，右子树输出在右下部分。左下和右下部分应当有相同的大小。即使一个子树为空而另一个非空，你不需要为空的子树输出任何东西，但仍需要为另一个子树留出足够的空间。然而，如果两个子树都为空则不需要为它们留出任何空间。
每个未使用的空间应包含一个空的字符串""。
使用相同的规则输出子树。
示例 1:

输入:
     1
    /
   2
输出:
[["", "1", ""],
 ["2", "", ""]]
示例 2:

输入:
     1
    / \
   2   3
    \
     4
输出:
[["", "", "", "1", "", "", ""],
 ["", "2", "", "", "", "3", ""],
 ["", "", "4", "", "", "", ""]]
示例 3:

输入:
      1
     / \
    2   5
   / 
  3 
 / 
4 
输出:
[["",  "",  "", "",  "", "", "", "1", "",  "",  "",  "",  "", "", ""]
 ["",  "",  "", "2", "", "", "", "",  "",  "",  "",  "5", "", "", ""]
 ["",  "3", "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]
 ["4", "",  "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]]
注意: 二叉树的高度在范围 [1, 10] 中。




//  先获取树的高度，构造空字符串列表。每行宽度是2的高度次方 -1
// 每个节点基于父节点索引位置确定当前节点在当前行的索引位置，递归替换空字符串
// 最底层节点和父节点的横向距离为1，往上依次*2
class Solution {
    private int depth;
    private List<List<String>> tree;
    public List<List<String>> printTree(TreeNode root) {
        if (root == null) return new LinkedList<>();
        depth = getDepth(root);
        tree = new ArrayList<>(depth);
        for(int i = 0; i < depth; i++) {
            List<String> temp = new ArrayList<>((1 << depth) - 1);
            for (int j = 0; j < (1 << depth) - 1; j++) {
                temp.add("");
            }
            tree.add(temp);
        }
        constructTree(root, ((1 << depth) - 1)/2, 0);
        return tree;
    }

    public int getDepth(TreeNode root) {
        if (root == null) return 0;
        return 1+ Math.max(getDepth(root.left), getDepth(root.right));
    }

    public void constructTree(TreeNode root, int base, int level) {
        tree.get(level).set(base, String.valueOf(root.val));
        if (root.left != null) constructTree(root.left, base - (1 << (depth - 2 - level)), level+1);
        if (root.right != null) constructTree(root.right, base + (1 << (depth - 2 - level)), level+1);
    }
}