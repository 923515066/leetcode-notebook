
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

   
// 对一个节点来说，左子树节点的值 、右子树节点的值 无所谓，树的数量只和节点数量有关系，等于左子树数量 * 右子树数量 
// 使用哈希表保存节点数量对应的树的数量，减少遍历次数
class Solution {
    Map<Integer, Integer> cache = new HashMap<>();
    public int numTrees(int n) {
        return numTreesCore(1, n);
    }

    public int numTreesCore(int left, int right) {
        if (left > right) return 1;
        if (left == right) return 1;
        if (cache.get(right - left + 1) != null) {
            return cache.get(right - left + 1);
        }
        int nums = 0;
        for (int i = left; i <= right; i++) {
            int leftNum = numTreesCore(left, i -1);
            int rightNum = numTreesCore(i+1, right);
            nums += leftNum * rightNum;
        }
        cache.put(right - left + 1, nums);
        return nums;
    }
}