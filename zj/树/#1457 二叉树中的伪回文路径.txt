给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「伪回文」的，当它满足：路径经过的所有节点值的排列中，存在一个回文序列。

请你返回从根到叶子节点的所有路径中 伪回文 路径的数目。

 

示例 1：



输入：root = [2,3,1,3,1,null,1]
输出：2 
解释：上图为给定的二叉树。总共有 3 条从根到叶子的路径：红色路径 [2,3,3] ，绿色路径 [2,1,1] 和路径 [2,3,1] 。
     在这些路径中，只有红色和绿色的路径是伪回文路径，因为红色路径 [2,3,3] 存在回文排列 [3,2,3] ，绿色路径 [2,1,1] 存在回文排列 [1,2,1] 。
示例 2：



输入：root = [2,1,1,1,3,null,null,null,null,null,1]
输出：1 
解释：上图为给定二叉树。总共有 3 条从根到叶子的路径：绿色路径 [2,1,1] ，路径 [2,1,3,1] 和路径 [2,1] 。
     这些路径中只有绿色路径是伪回文路径，因为 [2,1,1] 存在回文排列 [1,2,1] 。
示例 3：

输入：root = [9]
输出：1
 

提示：

给定二叉树的节点数目在 1 到 10^5 之间。
节点值在 1 到 9 之间。



//  记录路径上结点值出现次数为奇数的节点数量  <=1则符合
// 因为节点值范围为1-9所以使用数组代替了map
class Solution {
    private int pseudoPalindromicPathSum = 0;
    private int []array = new int[10];
    public int pseudoPalindromicPaths (TreeNode root) {
        for(int i = 0; i < 10; i++) array[i] = 0;
        pseudoPalindromicPathsCore(root, 0);
        return pseudoPalindromicPathSum;
    }

    public void pseudoPalindromicPathsCore(TreeNode root, int oddNum) {
        if (root == null) return;
        if (array[root.val] % 2 == 0) oddNum++;
        else oddNum--;
        array[root.val] += 1;
        // 非叶子结点
        if (root.left != null || root.right != null) {
            pseudoPalindromicPathsCore(root.left, oddNum);
            pseudoPalindromicPathsCore(root.right, oddNum);
        } 
        // 叶子结点
        else {
            if (oddNum <= 1) pseudoPalindromicPathSum++;
        }
        array[root.val] -= 1;
    }
}


//位操作解法未给出