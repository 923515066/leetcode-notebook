根据一棵树的中序遍历与后序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

中序遍历 inorder = [9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

   
   
//  递归函数记录当前子树节点在中序遍历中的head和tail
// 后续遍历的head tail不用记录，因为构建树时按照逆前序遍历的顺序的话，就是后序遍历数组的倒序
class Solution {
    private int[] inorder;
    private int[] postorder;
    private int postOrderInverseIndex;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        this.inorder = inorder;
        this.postorder = postorder;
        postOrderInverseIndex = postorder.length - 1;
        return buildTreeNode(0, inorder.length -1);
    }

    public TreeNode buildTreeNode(int inHead, int inTail) {
        if (inHead > inTail) return null;
        else if (inHead == inTail) {
            postOrderInverseIndex--;
            return new TreeNode(inorder[inHead]);
        } else {
			// 从inTail开始--, 不是从inHead开始++, 不然会遍历更多次
            int i = inTail;
            while(inorder[i] != postorder[postOrderInverseIndex]) i--;
            postOrderInverseIndex--;
            TreeNode node = new TreeNode(inorder[i]);
            node.right = buildTreeNode(i+1, inTail);
            node.left = buildTreeNode(inHead, i-1);
            return node;
        }
    }
}


//官方题解优化方法