返回与给定先序遍历?preorder 相匹配的二叉搜索树（binary search tree）的根结点。

(回想一下，二叉搜索树是二叉树的一种，其每个节点都满足以下规则，对于?node.left?的任何后代，值总 < node.val，而 node.right 的任何后代，值总 > node.val。此外，先序遍历首先显示节点的值，然后遍历 node.left，接着遍历 node.right。）

?

示例：

输入：[8,5,1,7,10,12]
输出：[8,5,10,1,7,null,12]

?

提示：

1 <= preorder.length <= 100
先序?preorder?中的值是不同的。

// 讲数组划分为当前构造节点，左子树部分，右子树部分三块
// 平均复杂度nlogn
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root = bstFromPreorderCore(preorder, 0, preorder.length-1);
        return root;
    }

    public TreeNode bstFromPreorderCore(int[] preorder, int head, int tail) {
		if (head > tail) return null;
        if (head == tail) return new TreeNode(preorder[head]);
        TreeNode root = new TreeNode(preorder[head]);
        int leftHead = head + 1;
        int leftTail = head;
        while(leftTail + 1 <= tail && preorder[leftTail + 1] < preorder[head]) leftTail++;
        root.left = bstFromPreorderCore(preorder, leftHead, leftTail);
        int rightTail = tail;
		int rightHead = leftTail+1;
        root.right = bstFromPreorderCore(preorder, rightHead, rightTail);
        return root;
    }
}

//可以尝试官方题解 复杂度优化版本o(n)
