给定一个二叉树，检查它是否是镜像对称的。

 

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3

   
//  镜像对称：当前节点相同且节点1的左子树 和 节点2的右子树 镜像对称 且 节点1的右子树 和 节点2的左子树 镜像对称 
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;
        else  return isSymmetricCore(root.left, root.right);
    }

    public boolean isSymmetricCore(TreeNode node1, TreeNode node2) {
        if (node1 == null || node2 == null) {
            if (node1 == null && node2 == null) return true;
            return false;
        }
        return (node1.val == node2.val) && isSymmetricCore(node1.left, node2.right) && isSymmetricCore(node1.right, node2.left);
    }
}

//考虑下迭代如何写