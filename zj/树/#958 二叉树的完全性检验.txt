给定一个二叉树，确定它是否是一个完全二叉树。

百度百科中对完全二叉树的定义如下：

若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~ 2h 个节点。）

 

示例 1：



输入：[1,2,3,4,5,6]
输出：true
解释：最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后一层中的所有结点（{4,5,6}）都尽可能地向左。
示例 2：



输入：[1,2,3,4,5,null,7]
输出：false
解释：值为 7 的结点没有尽可能靠向左侧。
 

提示：

树中将会有 1 到 100 个结点。



//  思路：假定树为完全二叉树计算节点的索引，把最大索引和树的节点数量进行比较
class Solution {
    // 树中节点个数
    private int sum = 0;
    // 按照子节点索引和父节点索引在完全二叉树中的关系 计算该树如果为完全二叉树的话最大索引值应该为多少
    private int maxIndex = 0;
    public boolean isCompleteTree(TreeNode root) {
        if (root == null) return true;
        dfs(root, 1);
        return maxIndex == sum;
    }

    public void dfs(TreeNode root, int index) {
        if (root == null) return;
        sum++;
        if (index > maxIndex) maxIndex = index;
        dfs(root.left, 2*index);
        dfs(root.right, 2*index+1);
    }
}