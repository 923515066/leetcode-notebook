给你 root1 和 root2 这两棵二叉搜索树。

请你返回一个列表，其中包含 两棵树 中的所有整数并按 升序 排序。.

 

示例 1：



输入：root1 = [2,1,4], root2 = [1,0,3]
输出：[0,1,1,2,3,4]
示例 2：

输入：root1 = [0,-10,10], root2 = [5,1,7,0,2]
输出：[-10,0,0,1,2,5,7,10]
示例 3：

输入：root1 = [], root2 = [5,1,7,0,2]
输出：[0,1,2,5,7]
示例 4：

输入：root1 = [0,-10,10], root2 = []
输出：[-10,0,10]
示例 5：



输入：root1 = [1,null,8], root2 = [8,1]
输出：[1,1,8,8]
 

提示：

每棵树最多有 5000 个节点。
每个节点的值在 [-10^5, 10^5] 之间。



//  思路：中序遍历获得两个有序链表后merge排序
class Solution {
    List <Integer>l1 = new ArrayList<>();
    List <Integer>l2 = new ArrayList<>();
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        Inorder(root1, l1);
        Inorder(root2, l2);
        int size1 = l1.size();
        int size2 = l2.size();
        int index1 = 0, index2 = 0;
        List<Integer> sum = new ArrayList<>(size1 + size2);
        for (; index1 <size1 && index2 < size2;) {
            if (l1.get(index1) < l2.get(index2)) {
                sum.add(l1.get(index1++));
            } else {
                sum.add(l2.get(index2++));
            }
        }
        for (int i = index1; i < size1;i++) {
            sum.add(l1.get(i));
        }
        for (int i = index2; i < size2;i++) {
            sum.add(l2.get(i));
        }
        return sum;
        
    }

    public void Inorder(TreeNode root, List list) {
        if (root == null) return;
        Inorder(root.left, list);
        list.add(root.val);
        Inorder(root.right, list);
    }
}