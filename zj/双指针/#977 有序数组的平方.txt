给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。

 

示例 1：

输入：nums = [-4,-1,0,3,10]
输出：[0,1,9,16,100]
解释：平方后，数组变为 [16,1,0,9,100]
排序后，数组变为 [0,1,9,16,100]
示例 2：

输入：nums = [-7,-3,2,3,11]
输出：[4,9,9,49,121]
 

提示：

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums 已按 非递减顺序 排序
 

进阶：

请你设计时间复杂度为 O(n) 的算法解决本问题


#指针从数组头部和尾部往中间遍历，降序插入平方数
class Solution {
    public int[] sortedSquares(int[] nums) {
        int len = nums.length;
        int[] arr = new int[len];
        int head = 0, tail = len-1;
        int curr = len-1;
        while(head < tail) {
            if (Math.abs(nums[head]) > Math.abs(nums[tail])) {
                arr[curr--] = nums[head] * nums[head];
                head++;
            } else {
                arr[curr--] = nums[tail] * nums[tail];
                tail--;
            }
        }
        arr[curr] = nums[head] * nums[tail];
        return arr;
    }
}