给定一组 N 人（编号为 1, 2, ..., N）， 我们想把每个人分进任意大小的两组。

每个人都可能不喜欢其他人，那么他们不应该属于同一组。

形式上，如果 dislikes[i] = [a, b]，表示不允许将编号为 a 和 b 的人归入同一组。

当可以用这种方法将每个人分进两组时，返回 true；否则返回 false。

 

示例 1：

输入：N = 4, dislikes = [[1,2],[1,3],[2,4]]
输出：true
解释：group1 [1,4], group2 [2,3]
示例 2：

输入：N = 3, dislikes = [[1,2],[1,3],[2,3]]
输出：false
示例 3：

输入：N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
输出：false
 

提示：

1 <= N <= 2000
0 <= dislikes.length <= 10000
dislikes[i].length == 2
1 <= dislikes[i][j] <= N
dislikes[i][0] < dislikes[i][1]
对于 dislikes[i] == dislikes[j] 不存在 i != j




// 非邻接表记录不喜欢的邻居
// dfs遍历，如果非邻接点和自己同色，则false
// 一遍dfs可能无法遍历所有节点，也就是图之间是不连通的，不连通节点选择哪一组时不会受前面节点的影响，默认选择一个即可
class Solution {
    private ArrayList<Integer> []dis;
    private int []ans;
    public boolean possibleBipartition(int N, int[][] dislikes) {
        dis = new ArrayList[N+1];
        for (int i = 0; i <= N; i++) {
            dis[i] = new ArrayList<Integer>();
        }
        for (int []a :dislikes) {
            dis[a[0]].add(a[1]);
            dis[a[1]].add(a[0]);
        }
        ans = new int[N+1];
        for (int i = 1; i <= N; i++) {
            if (ans[i] == 0) {
                if (!dfs(i , 1)) return false;
            }
        }
        return true;
    }

    public boolean dfs(int node, int group1) {
        ans[node] = group1;
        for (int dislikeNode : dis[node]) {
            if (ans[dislikeNode] == group1) return false;
            if (ans[dislikeNode] == 0 && !dfs(dislikeNode, -group1)) return false;
        }
        return true;
    }
}