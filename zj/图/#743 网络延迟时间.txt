有 N 个网络节点，标记为 1 到 N。

给定一个列表 times，表示信号经过有向边的传递时间。 times[i] = (u, v, w)，其中 u 是源节点，v 是目标节点， w 是一个信号从源节点传递到目标节点的时间。

现在，我们从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1。

 

示例：



输入：times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
输出：2
 

注意:

N 的范围在 [1, 100] 之间。
K 的范围在 [1, N] 之间。
times 的长度在 [1, 6000] 之间。
所有的边 times[i] = (u, v, w) 都有 1 <= u, v <= N 且 0 <= w <= 100。




// 迪杰斯特拉
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        List<List<Pair>> ans = new ArrayList<>(n);
        for(int i = 0; i < n; i++) ans.add(new ArrayList<Pair>());
        for(int []a : times) {
            ans.get(a[0]-1).add(new Pair(a[2], a[1]-1));
        }
        int []result = new int[n];
        Arrays.fill(result, -1);
        result[k-1] = 0;

        PriorityQueue<Pair> queue = new PriorityQueue<>();
        queue.offer(new Pair(0, k-1));

        while(!queue.isEmpty()) {
            Pair pair = queue.poll();
            int node = pair.node;
            int time = pair.time;
            if (time > result[node]) continue;
            for(Pair neighbor : ans.get(node)) {
                int nodeNeighbor = neighbor.node;
                int timeNeighbor = neighbor.time;
                int newTime = timeNeighbor + result[node];
                if (newTime < result[nodeNeighbor] || result[nodeNeighbor] == -1) {
                    result[nodeNeighbor] = newTime;
                    queue.offer(new Pair(newTime, nodeNeighbor));
                }
            }
        }

        int max = -1;
        for(int a : result) {
            if (a == -1) return -1;
            else max = Math.max(a, max);
        }
        return max;
    }

    class Pair implements Comparable<Pair> {
        int time;
        int node;

        public Pair(int time, int node) {
            this.time = time;
            this.node = node;
        }

        public int compareTo(Pair pair2) {
            if (this.time == pair2.time) {
                return this.node - pair2.node;
            } else {
                return this.time - pair2.time > 0 ? 1 : -1;
            }
        }
    }
}