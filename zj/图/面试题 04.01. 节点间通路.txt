节点间通路。给定有向图，设计一个算法，找出两个节点之间是否存在一条路径。

示例1:

 输入：n = 3, graph = [[0, 1], [0, 2], [1, 2], [1, 2]], start = 0, target = 2
 输出：true
示例2:

 输入：n = 5, graph = [[0, 1], [0, 2], [0, 4], [0, 4], [0, 1], [1, 3], [1, 4], [1, 3], [2, 3], [3, 4]], start = 0, target = 4
 输出 true
提示：

节点数量n在[0, 1e5]范围内。
节点编号大于等于 0 小于 n。
图中可能存在自环和平行边。



// bfs
class Solution {
    public boolean findWhetherExistsPath(int n, int[][] graph, int start, int target) {
        ArrayList<Integer> []neighborGraph = new ArrayList[n];
        for(int i = 0; i < n; i++) neighborGraph[i] = new ArrayList<Integer>();
        for (int []a : graph) {
            neighborGraph[a[0]].add(a[1]);
        }

        Queue<Integer> queue = new LinkedList<>();
        // HashSet<Integer> found =new HashSet<>();
        boolean []found = new boolean[n];


        queue.offer(start);
        found[start] = true;
        while(!queue.isEmpty()) {
            int node = queue.poll();
            for (int neighbor : neighborGraph[node]) {
                if (neighbor == target) return true;
                if (found[neighbor]) continue;
                found[neighbor] = true;
                queue.offer(neighbor);
            }
        }
        return false;
    }
}


// 将set改为数组，逆序查找，效果提升明显
// bfs
class Solution {
    public boolean findWhetherExistsPath(int n, int[][] graph, int start, int target) {
        ArrayList<Integer> []neighborGraph = new ArrayList[n];
        for(int i = 0; i < n; i++) neighborGraph[i] = new ArrayList<Integer>();
        for (int []a : graph) {
            neighborGraph[a[1]].add(a[0]);
        }

        Queue<Integer> queue = new LinkedList<>();
        // HashSet<Integer> found =new HashSet<>();
        boolean []found = new boolean[n];


        queue.offer(target);
        found[target] = true;
        while(!queue.isEmpty()) {
            int node = queue.poll();
            for (int neighbor : neighborGraph[node]) {
                if (neighbor == start) return true;
                if (found[neighbor]) continue;
                found[neighbor] = true;
                queue.offer(neighbor);
            }
        }
        return false;
    }
}


// dfs
class Solution {
    private ArrayList<Integer> []neighborGraph;
    private boolean[]found;
    public boolean findWhetherExistsPath(int n, int[][] graph, int start, int target) {
        neighborGraph = new ArrayList[n];
        for(int i = 0; i < n; i++) neighborGraph[i] = new ArrayList<Integer>();
        for (int []a : graph) {
            neighborGraph[a[1]].add(a[0]);
        }

        found = new boolean[n];
        return dfs(target, start);
    }

    public boolean dfs(int node, int start) {
        if (found[node]) return false;
        if (node == start) return true;
        found[node] = true;
        for (int neighbor: neighborGraph[node]) {
            if (dfs(neighbor, start)) return true;
        }
        return false;
    }
}