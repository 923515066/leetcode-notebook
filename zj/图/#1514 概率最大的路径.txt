 给你一个由 n 个节点（下标从 0 开始）组成的无向加权图，该图由一个描述边的列表组成，其中 edges[i] = [a, b] 表示连接节点 a 和 b 的一条无向边，且该边遍历成功的概率为 succProb[i] 。

指定两个节点分别作为起点 start 和终点 end ，请你找出从起点到终点成功概率最大的路径，并返回其成功概率。

如果不存在从 start 到 end 的路径，请 返回 0 。只要答案与标准答案的误差不超过 1e-5 ，就会被视作正确答案。

 

示例 1：



输入：n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
输出：0.25000
解释：从起点到终点有两条路径，其中一条的成功概率为 0.2 ，而另一条为 0.5 * 0.5 = 0.25
示例 2：



输入：n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
输出：0.30000
示例 3：



输入：n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
输出：0.00000
解释：节点 0 和 节点 2 之间不存在路径
 

提示：

2 <= n <= 10^4
0 <= start, end < n
start != end
0 <= a, b < n
a != b
0 <= succProb.length == edges.length <= 2*10^4
0 <= succProb[i] <= 1
每两个节点之间最多有一条边


// 迪杰斯特拉算法
class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        List<List<Pair>> graph = new ArrayList<>(n);
        for(int i = 0; i <n; i++) {
            graph.add(new ArrayList<Pair>());
        }

        for(int i = 0; i < edges.length; i++) {
            int []a= edges[i];
            graph.get(a[0]).add(new Pair(succProb[i], a[1]));
            graph.get(a[1]).add(new Pair(succProb[i], a[0]));
        }
        // 使用优先级队列，优化复杂度
        PriorityQueue<Pair> queue = new PriorityQueue<>();
        // 使用迪杰斯特拉算法计算每个节点到start的最短路径
        // 具体证明见官方题解，思路：维护一个集合，集合中每个节点都已明确到start的最短路径
        // 每次从集合外选择一个距离start最近的节点加入集合，更新新加入节点的邻接点信息

        // 每个节点到start的当前最大概率
        double []probs = new double[n];
        probs[start] = 1;
        queue.offer(new Pair(1, start));

        while(!queue.isEmpty()) {
            Pair pair = queue.poll();
            double prob = pair.prob;
            int node = pair.node;
            // 从优先级队列中取出来的点有可能比当前最新概率值小
            //     -> 0.6 【2】-> 0.3
            // 【1】                 【4】 
            //     -> 0.5 【3】-> 0.4
            // 4这个节点会作为pair两次被插入优先级队列，但是第一次取出的概率为0.5*0.4 = 0.2，第二次取出的为0.18
            // 不存在0.18先于0.2被取出的可能，迪杰斯特拉算法保证了这种情况不会发生
			
			// 这里这能是< 不能是<= 
            if (prob < probs[node]) continue;
            if (prob < 1e-5) continue;
            for(Pair neighbor : graph.get(node)) {
                double probNext = neighbor.prob;
                int nodeNext = neighbor.node;
                double newProb = probs[node] * probNext;
                if (probs[nodeNext] < newProb && newProb > 1e-5) {
                    probs[nodeNext] = probs[node] * probNext;
                    queue.offer(new Pair(probs[nodeNext], nodeNext));
                }
            }
        }
        return probs[end];
    }

    class Pair implements Comparable<Pair> {
        double prob;
        int node;

        public Pair(double prob, int node) {
            this.prob = prob;
            this.node = node;
        }

        public int compareTo(Pair pair2) {
            if (this.prob == pair2.prob) {
                return this.node - pair2.node;
            } else {
                return this.prob - pair2.prob > 0 ? -1 : 1;
            }
        }
    }
}

//Bellman-Ford算法
class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        double []ans = new double[n];
        ans[start] = 1;
        boolean status = true;
         对所有点到start的距离一直遍历更新，直到所有节点的距离都不变为止
        while(status) {
            status = false;
             这里的循环为什么是edges.length 在稀疏图和密集图里性能差距大吗
            for(int i = 0; i  edges.length; i++) {
                if (ans[edges[i][0]]  succProb[i]  ans[edges[i][1]]) {
                    ans[edges[i][1]] = ans[edges[i][0]]  succProb[i];
                    status = true;
                }
                if (ans[edges[i][1]]  succProb[i]  ans[edges[i][0]]) {
                    ans[edges[i][0]] = ans[edges[i][1]]  succProb[i];
                    status = true;
                }
            }
        }
        return ans[end];
    }
}