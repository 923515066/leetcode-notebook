在一个有向图中，节点分别标记为 0, 1, ..., n-1。这个图中的每条边不是红色就是蓝色，且存在自环或平行边。

red_edges 中的每一个 [i, j] 对表示从节点 i 到节点 j 的红色有向边。类似地，blue_edges 中的每一个 [i, j] 对表示从节点 i 到节点 j 的蓝色有向边。

返回长度为 n 的数组 answer，其中 answer[X] 是从节点 0 到节点 X 的红色边和蓝色边交替出现的最短路径的长度。如果不存在这样的路径，那么 answer[x] = -1。

 

示例 1：

输入：n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
输出：[0,1,-1]
示例 2：

输入：n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
输出：[0,1,-1]
示例 3：

输入：n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
输出：[0,-1,-1]
示例 4：

输入：n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
输出：[0,1,2]
示例 5：

输入：n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
输出：[0,1,1]
 

提示：

1 <= n <= 100
red_edges.length <= 400
blue_edges.length <= 400
red_edges[i].length == blue_edges[i].length == 2
0 <= red_edges[i][j], blue_edges[i][j] < n



// 如果不考虑颜色就是普通的dfs或者bfs即可，加上颜色后每次还需要考虑上一条边的颜色
// 所以判断节点0到每个节点的距离需要分为 最后一条边是红色/蓝色的情况

// dfs
class Solution {
    // 每个节点的红出边/蓝出边邻接表
    List<Set<Integer>> redGraph;
    List<Set<Integer>> blueGraph;

    // 从0到每个节点且最后一条边为红边/蓝边的最短距离
    int []red;
    int []blue;

    public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges) {
        redGraph= new ArrayList<>(n);
        blueGraph = new ArrayList<>(n);
        for(int i = 0; i < n; i++) {
            redGraph.add(new HashSet<>());
            blueGraph.add(new HashSet<>());
        }
        for(int []a :red_edges) {
            redGraph.get(a[0]).add(a[1]);
        }
        for(int []a : blue_edges) {
            blueGraph.get(a[0]).add(a[1]);
        }
        red = new int[n];
        blue = new int[n];
        for (int i = 1; i < n; i++) {red[i] = blue[i] = -1;}

        dfs(0, true);
        dfs(0, false);

        int []ans = new int[n];
		// 不为-1的最小值
        for (int i = 0; i < n; i++) {
            if (red[i] != -1 && blue[i] != -1) ans[i] = Math.min(red[i], blue[i]);
            else ans[i] = Math.max(red[i], blue[i]);
        }
        return ans;
    }

    public void dfs(int lastNode, boolean lastEdgeIsBlue) {
        if (lastEdgeIsBlue) {
            for (int node : redGraph.get(lastNode)) {
                if (red[node] == -1 || red[node] > blue[lastNode] + 1) {
                    red[node] = blue[lastNode] + 1;
                    dfs(node, false);
                }
            }
        } else {
            for (int node : blueGraph.get(lastNode)) {
                if (blue[node] == -1 || blue[node] > red[lastNode] + 1) {
                    blue[node] = red[lastNode] + 1;
                    dfs(node, true);
                }
            }
        }
    }
}