给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。

示例 :

输入: [1,2,1,3,2,5]
输出: [3,5]
注意：

结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。
你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？



// 思路见题解：https://leetcode-cn.com/problems/single-number-iii/solution/java-yi-huo-100-yao-shi-kan-bu-dong-wo-jiu-qu-chu-/
class Solution {
    public int[] singleNumber(int[] nums) {
        int val = 0;
        // 所有元素进行异或，如果某一位为1则表明两个只出现一次的数字在这一位不同
        for (int num : nums) {
            val ^= num;
        }
        int temp = 1;
        while (true) {
            if ((val & temp) != 0) break;
            temp <<= 1;
        }
        // 确定了两个只出现一次的数字在哪一位不同后，由temp将它们分隔开进行异或，则两组异或的结果就是这两个元素了
        int ansA = 0, ansB = 0;
        for (int num : nums) {
            if ((num & temp) != 0) ansA ^= num;
            else ansB ^= num;
        }
        int ans[] = new int[]{ansA, ansB};
        return ans;
    }
}