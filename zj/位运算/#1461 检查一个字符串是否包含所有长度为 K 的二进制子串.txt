给你一个二进制字符串 s 和一个整数 k 。

如果所有长度为 k 的二进制字符串都是 s 的子串，请返回 True ，否则请返回 False 。

 

示例 1：

输入：s = "00110110", k = 2
输出：true
解释：长度为 2 的二进制串包括 "00"，"01"，"10" 和 "11"。它们分别是 s 中下标为 0，1，3，2 开始的长度为 2 的子串。
示例 2：

输入：s = "00110", k = 2
输出：true
示例 3：

输入：s = "0110", k = 1
输出：true
解释：长度为 1 的二进制串包括 "0" 和 "1"，显然它们都是 s 的子串。
示例 4：

输入：s = "0110", k = 2
输出：false
解释：长度为 2 的二进制串 "00" 没有出现在 s 中。
示例 5：

输入：s = "0000000001011100", k = 4
输出：false
 

提示：

1 <= s.length <= 5 * 10^5
s 中只含 0 和 1 。
1 <= k <= 20



// 直接获取子字符串计算哈希值
// class Solution {
//     public boolean hasAllCodes(String s, int k) {
//         HashSet<String> ans = new HashSet<>();
//         for(int i = 0; i < s.length() - k + 1; i++) {
//             String temp = s.substring(i, i + k);
//             if (!ans.contains(temp)) {
//                 ans.add(temp);
//             } 
//         }
//         if (ans.size() == (int)Math.pow(2,k)) return true;
//         return false;
//     }
// }


// rabin-karp + 位运算，通过旋转哈希降低求哈希值的复杂度
class Solution {
    public boolean hasAllCodes(String s, int k) {
        if (s.length() < k) return false;
        // 保存子字符串转为数字后的值的集合
        HashSet<Integer> ans = new HashSet<>();
        int h = 0;
        for (int i = 0; i < k; i++) {
            h <<= 1;
            h += (s.charAt(i) - '0');
        }
        ans.add(h);
        for(int i = k; i < s.length(); i++) {
            h <<= 1;
            h += (s.charAt(i) - '0');
            h &= ~(1 << k);
            if (!ans.contains(h)) {
                ans.add(h);
            } 
        }
        if (ans.size() == (int)Math.pow(2,k)) return true;
        return false;
    }
}