给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

示例 1:

输入: 2
输出: [0,1,1]
示例 2:

输入: 5
输出: [0,1,1,2,1,2]
进阶:

给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
要求算法的空间复杂度为O(n)。
你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。



// class Solution {
//     public int[] countBits(int num) {
//         if (num == 0) return new int[]{0};
//         // val为 比当前遍历的num小于或等于的  最大的 2的整数幂
//         // num: 0 1 2 3 4 5 6 7 8...
//         // val: 0 1 2 2 4 4 4 4 8...
//		   // ans: 0 1 1 2 1 2 2 3 1
//         int val = 1;
//         int ans[] = new int[num+1];
//         ans[0] = 0;
//         for(int i = 1; i <= num; i++) {
//             if (i == 2 * val) val *= 2;
//             ans[i] = ans[i-val] + 1;
//         }
//         return ans;
//     }
// }

class Solution {
    public int[] countBits(int num) {
        if (num == 0) return new int[]{0};
        int ans[] = new int[num+1];
        ans[0] = 0;
        // 从二进制来看，ans[num]中1的数量 等于 ans[num>>1]中1的数量 加上 最后一位是否为1
        for(int i = 1; i <= num; i++) {
            ans[i] = ans[i>>1] + (i&1);
        }
        return ans;
    }
}