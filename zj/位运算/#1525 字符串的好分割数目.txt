给你一个字符串 s ，一个分割被称为 「好分割」 当它满足：将 s 分割成 2 个字符串 p 和 q ，它们连接起来等于 s 且 p 和 q 中不同字符的数目相同。

请你返回 s 中好分割的数目。

 

示例 1：

输入：s = "aacaba"
输出：2
解释：总共有 5 种分割字符串 "aacaba" 的方法，其中 2 种是好分割。
("a", "acaba") 左边字符串和右边字符串分别包含 1 个和 3 个不同的字符。
("aa", "caba") 左边字符串和右边字符串分别包含 1 个和 3 个不同的字符。
("aac", "aba") 左边字符串和右边字符串分别包含 2 个和 2 个不同的字符。这是一个好分割。
("aaca", "ba") 左边字符串和右边字符串分别包含 2 个和 2 个不同的字符。这是一个好分割。
("aacab", "a") 左边字符串和右边字符串分别包含 3 个和 1 个不同的字符。
示例 2：

输入：s = "abcd"
输出：1
解释：好分割为将字符串分割成 ("ab", "cd") 。
示例 3：

输入：s = "aaaaa"
输出：4
解释：所有分割都是好分割。
示例 4：

输入：s = "acbadbaada"
输出：2
 

提示：

s 只包含小写英文字母。
1 <= s.length <= 10^5



// 使用hashmap保存 左右两个子字符串出现的不同字符数目
// key设为character竟然比integer慢。。
// class Solution {
//     public int numSplits(String s) {
//         int ans = 0;
//         HashMap<Integer, Integer> leftmap = new HashMap<>();
//         HashMap<Integer, Integer> rightmap = new HashMap<>();
//         leftmap.put(s.charAt(0) - 'a', 1);
//         for(int i = 1; i < s.length(); i++) {
//             int val = s.charAt(i) - 'a';
//             rightmap.put(val, rightmap.getOrDefault(val, 0)+1);
//         }
//         ans += (leftmap.size() == rightmap.size())?1:0;
//         for(int i = 1; i <s.length()-1; i++) {
//             int val = s.charAt(i) - 'a';
//             leftmap.put(val, leftmap.getOrDefault(val, 0)+1);
//             if (rightmap.get(val) == 1) rightmap.remove(val);
//             else rightmap.put(val, rightmap.get(val) - 1);
//             ans += (leftmap.size() == rightmap.size())?1:0;
//         }
//         return ans;
//     }
// }

// 不使用哈希，因为字符只限小写字母，直接使用两个长度为26的数组
// 直接s.toCharArray()获取字符数组比每次调用charAt快得多
class Solution {
    public int numSplits(String s) {
        int ans = 0;
        int leftArr[] = new int[26];
        int rightArr[] = new int[26];
        int leftNum = 0, rightNum = 0;
        char []charArr = s.toCharArray();
        // for (int i = 0; i < 26; i++) {
        //     leftArr[i] = 0;
        //     rightArr[i] = 0;
        // }
        leftArr[s.charAt(0) - 'a'] = 1;
        leftNum = 1;
        for(int i = 1; i < s.length(); i++) {
            if (rightArr[charArr[i] - 'a'] == 0) rightNum++;
            rightArr[charArr[i] - 'a'] += 1;
        }
        ans += (leftNum == rightNum)?1:0;
        for(int i = 1; i <s.length()-1; i++) {
            int val = charArr[i] - 'a';
            if (leftArr[val] == 0) leftNum++;
            leftArr[val] += 1;
            if (rightArr[val] == 1) rightNum--;
            rightArr[val] -= 1;
            ans += (leftNum == rightNum)?1:0;
        }
        return ans;
    }
}