给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。

示例 1:

输入: ["abcw","baz","foo","bar","xtfn","abcdef"]
输出: 16 
解释: 这两个单词为 "abcw", "xtfn"。
示例 2:

输入: ["a","ab","abc","d","cd","bcd","abcd"]
输出: 4 
解释: 这两个单词为 "ab", "cd"。
示例 3:

输入: ["a","aa","aaa","aaaa"]
输出: 0 
解释: 不存在这样的两个单词。



// 字符串中只有小写字母26位，将26个字母对应int值的低26位，如果字符串中出现了字母则对应位置1
// 两个字符串的值 进行&操作，如果为0则说明不存在公共字母
// O(N^2)复杂度 遍历所有字符串之间的情况
class Solution {
    public int maxProduct(String[] words) {
        int ans = 0;
        int val[] = new int[words.length];
        for(int i = 0; i < words.length; i++) {
            int temp = 0;
            for(int j = 0; j < words[i].length(); j++) {
                temp |= (1 << (words[i].charAt(j) - 'a'));
            }
            val[i] = temp;
        }
        for(int i = 0; i <words.length; i++) {
            for(int j = 0; j < i; j++) {
                if ((val[i] & val[j]) == 0) {
                    ans = Math.max(words[i].length()*words[j].length(), ans);
                }
            }
        }
        return ans;
    }
}