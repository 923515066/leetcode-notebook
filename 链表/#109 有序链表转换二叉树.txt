给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定的有序链表： [-10, -3, 0, 5, 9],

一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5


// 方法1 递归法，中间节点为当前根节点
// 快慢指针找中点
// 链表前半段在下一次递归调用前记得断尾
// 时间复杂度O(NlogN) 空间复杂度O(logN)
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if (head == null) return null;
        return sortedCore(head);
    }

    public TreeNode sortedCore(ListNode head) {
        if (head.next == null) {
            return new TreeNode(head.val);
        } 
        if (head.next.next == null) {
            TreeNode root = new TreeNode(head.val);
            root.right = new TreeNode(head.next.val);
            return root;
        }
        ListNode curr = head;
        ListNode pre = null;
        ListNode fast = head;
        while (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            pre = curr;
            curr = curr.next;
        }
        // 链表前半段在下一次递归调用前记得断尾
        if (pre != null) pre.next = null;
        TreeNode root = new TreeNode(curr.val);
        root.left = sortedCore(head);
        root.right = sortedCore(curr.next);
        return root;
    }
}


//  相对方法1，保存链表为数组，空间换时间
// 时间复杂度O(n),空间复杂度O(n)
// 官方代码
class Solution {

  private List<Integer> values;

    public Solution() {
        this.values = new ArrayList<Integer>();
    }

    private void mapListToValues(ListNode head) {
        while (head != null) {
        this.values.add(head.val);
        head = head.next;
        }
    }

    private TreeNode convertListToBST(int left, int right) {
        // Invalid case
        if (left > right) {
        return null;
        }

        // Middle element forms the root.
        int mid = (left + right) / 2;
        TreeNode node = new TreeNode(this.values.get(mid));

        // Base case for when there is only one element left in the array
        if (left == right) {
        return node;
        }

        // Recursively form BST on the two halves
        node.left = convertListToBST(left, mid - 1);
        node.right = convertListToBST(mid + 1, right);
        return node;
    }

    public TreeNode sortedListToBST(ListNode head) {

        // Form an array out of the given linked list and then
        // use the array to form the BST.
        this.mapListToValues(head);

        // Convert the array to
        return convertListToBST(0, this.values.size() - 1);
    }
}



// 参考中序递归遍历的思想，一颗平衡二叉树在中序遍历时的节点的值就是大小排序的。
// 我们获得了链表的长度后，类似中序遍历地进行中序创建，使用一个指针在中序创建时同时遍历链表用于获取树节点的值
// 当前树节点创建完成后，链表的遍历节点记得指向next
// 时间复杂度O(n),空间复杂度O(logN)
// 官方代码
class Solution {
    // 链表遍历指针
    private ListNode head;

    private int findSize(ListNode head) {
        ListNode ptr = head;
        int c = 0;
        while (ptr != null) {
        ptr = ptr.next;  
        c += 1;
        }
        return c;
    }

    private TreeNode convertListToBST(int l, int r) {
        // Invalid case
        if (l > r) {
        return null;
        }

        int mid = (l + r) / 2;

        TreeNode left = this.convertListToBST(l, mid - 1);
        TreeNode node = new TreeNode(this.head.val);
        node.left = left;
        // 树节点创建完成后，链表的遍历节点记得指向next
        this.head = this.head.next;
        node.right = this.convertListToBST(mid + 1, r);
        return node;
    }

    public TreeNode sortedListToBST(ListNode head) {
        int size = this.findSize(head);
        this.head = head;
        return convertListToBST(0, size - 1);
    }
}