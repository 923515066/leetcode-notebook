/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 import java.util.Stack;
class Solution {
    public int[] nextLargerNodes(ListNode head) {
        if (head == null) return null;
        ListNode curr = head;
        int size = 0;
        Stack<ListNode> stack = new Stack<ListNode>();
        int max = 0;
        // 创建栈保存节点引用，新push的节点，和前面的比较，若以往的节点值更小则更改value为当前push节点的val后弹出
        // 直到遇到val更大的老节点
        while (curr != null) {
            while(!stack.isEmpty() && stack.peek().val < curr.val) {
                stack.pop().val = curr.val;
            }
            stack.push(curr);
            curr = curr.next;
            size++;
        }
        // 所有节点都插入栈一遍后，栈剩下的节点的链表前方无更大值节点，赋值0
        while (!stack.isEmpty()) {
            stack.pop().val = 0;
        }
        int []array = new int[size];
        curr = head;
        for (int i =0; i < size; i++) {
            array[i] = curr.val;
            curr = curr.next;
        }
        return array;
    }
}