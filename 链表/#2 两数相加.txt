给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 // 考虑代码简洁度可以去掉后两层循环，把第一层循环的判断的&&修改为|| 但是每次都要额外判断l1 l2是否为null
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode sumNode =null;
        ListNode sumListHead = null;
        while (l1 != null && l2 != null) {
            if (sumNode == null) {
                sumNode = new ListNode(0);
                sumListHead = sumNode;
            } else {
                sumNode.next = new ListNode(0);
                sumNode = sumNode.next;
            }
            if (l1.val + l2.val + carry >=10) {
                sumNode.val = l1.val + l2.val + carry - 10;
                carry = 1;
            }
            else {
                sumNode.val = l1.val + l2.val + carry;
                carry = 0;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            sumNode.next = new ListNode(0);
            sumNode = sumNode.next;
            if (l1.val + carry >=10) {
                sumNode.val = l1.val + carry - 10;
                carry = 1;
            }
            else {
                sumNode.val = l1.val + carry;
                carry = 0;
            }
            l1 = l1.next;
        }
        while (l2 != null) {
            sumNode.next = new ListNode(0);
            sumNode = sumNode.next;
            if (l2.val + carry >=10) {
                sumNode.val = l2.val + carry - 10;
                carry = 1;
            }
            else {
                sumNode.val = l2.val + carry;
                carry = 0;
            }
            l2 = l2.next;
        }
        if (carry == 1) {
            sumNode.next = new ListNode(1);
            sumNode = sumNode.next;
        }
        return sumListHead;
    }
}