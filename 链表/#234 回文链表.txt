请判断一个链表是否为回文链表。

示例 1:

输入: 1->2
输出: false
示例 2:

输入: 1->2->2->1
输出: true
进阶：
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？、




//  一边反转一边快慢指针找中间节点，将前半段链表进行反转
// 如果为奇数个节点，while循环后curr刚好落在中间节点，中间节点不需要参与回文判断
// 如果为偶数个，循环后curr落在两个中间节点的左边那个，需要将当前节点的next指向pre后再判断回文，中间节点需要参与回文判断
// 循环中快指针的跳转需要在链表反转前执行，不然会空指针
class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true;
        ListNode pre = null;
        ListNode curr = head;
        ListNode next;
        ListNode fast = head;
        while (fast.next != null && fast.next.next != null) {
            // 先执行，否则下面链表反转后再执行会空指针
            fast = fast.next.next;

            next = curr.next;
            curr.next = pre;
            pre = curr;
            curr = next;
        }
        // 链表为单数
        if (fast.next == null) {
            return isPalindromeCore(pre, curr.next);    
        } else {
            next = curr.next;
            curr.next = pre;
            return isPalindromeCore(curr, next);    
        }
    }
    public boolean isPalindromeCore(ListNode head1, ListNode head2) {
        while (head1 != null) {
            if (head1.val == head2.val) {
                head1 = head1.next;
                head2 = head2.next;
            } else {
                return false;
            }
        }
        return true;
    }
}