请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。
(同138)
 

示例 1：



输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]
示例 2：



输入：head = [[1,1],[2,1]]
输出：[[1,1],[2,1]]
示例 3：



输入：head = [[3,null],[3,0],[3,null]]
输出：[[3,null],[3,0],[3,null]]
示例 4：

输入：head = []
输出：[]
解释：给定的链表为空（空指针），因此返回 null。


// 代码相对138更加简洁
class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return head;

        Node newListSentry = new Node(0);
        Node newCurr = newListSentry;

        Node curr = head;
        // 深拷贝next节点 同时把通过中间节点next将旧节点和新的拷贝节点联系
        while (curr != null) {
            newCurr.next = new Node(curr.val);
            newCurr = newCurr.next;

            Node temp = new Node(0);
            temp.next = curr.next;
            curr.next = temp;
            temp.random = newCurr;
            curr = temp.next;
        }
        // 深拷贝随机指针
        curr = head;
        while (curr != null) {
            // 特殊情况  random指向null
            // curr.next.random.random 当前节点所属的深拷贝节点的random指针
            // curr.random.next.random 当前节点的random指针所指节点的深拷贝
            if (curr.random != null) {
                curr.next.random.random = curr.random.next.random;
            }
            curr = curr.next.next;
        }
        curr = head;
        while (curr != null) { 
            // 原链表next指针复原 否则会报错
            curr.next = curr.next.next;
            curr = curr.next;
        }
        return newListSentry.next;
        
    }
}
